{"version":3,"file":"static/js/984.3b77cd29.chunk.js","mappings":"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","sources":["main/views/shifts/open-shifts.tsx","main/views/dashboard/PostShiftForm.tsx","modules/facility/dashboard/index.tsx","modules/facility/account/index.tsx","main/views/contract/index.tsx","main/views/contract/canvas.tsx","main/views/contract/detail.tsx","main/views/contract/payment.tsx","modules/facility/contract/index.tsx","main/components/carousel/index.tsx","main/views/shifts/shift-details.tsx","main/views/shifts/hired-shift.tsx","main/views/shifts/completed-shift-details.tsx","main/views/shifts/completed.tsx","modules/facility/shifts/index.tsx","main/views/messages/chat.tsx","modules/facility/messages/index.tsx","modules/facility/canceled-reported/index.tsx","modules/facility/notifications/index.tsx","main/views/shifts/invoice-shift.tsx","modules/facility/invoices-current/index.tsx","modules/facility/invoices-history/index.tsx","main/views/contract/not-verified.tsx","modules/facility/route.tsx"],"sourcesContent":["import {\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogCloseButton,\r\n  AlertDialogContent,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogOverlay,\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  HStack,\r\n  Heading,\r\n  Icon,\r\n  Text,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport {MdBusinessCenter} from \"react-icons/md\";\r\nimport {BsGrid1X2Fill, BsClock} from \"react-icons/bs\";\r\nimport {ShiftDTO} from \"main/models\";\r\nimport moment from \"moment\";\r\nimport {useRef} from \"react\";\r\ntype OpenShiftCardProps = {\r\n  shift: ShiftDTO;\r\n  onCancelShift?: (id: number) => void;\r\n};\r\n\r\nconst OpenShiftCard = (props: OpenShiftCardProps) => {\r\n  const {shift, onCancelShift} = props;\r\n  const {id, role, invoice_rate, floor, start_time, end_time} = shift;\r\n  const {isOpen, onClose, onOpen} = useDisclosure();\r\n  const cancelRef = useRef<any>(null);\r\n  return (\r\n    <Box maxWidth={400} mx='auto' my={5} minWidth={{base: \"100%\", md: 350}}>\r\n      <Card bg='#fff' p={8} boxShadow='md' border={2} variant='elevated'>\r\n        <CardHeader p={0}>\r\n          <HStack flexWrap='wrap' justifyContent='space-between'>\r\n            <Heading fontSize='xl'>{`Shift #${id}`}</Heading>\r\n            <Button\r\n              colorScheme='red'\r\n              color='#E3022A'\r\n              px={10}\r\n              variant='outline'\r\n              onClick={onOpen}\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </HStack>\r\n        </CardHeader>\r\n        <CardBody p={0}>\r\n          <HStack justifyContent='space-between' flexWrap='wrap' my={3} gap={3}>\r\n            <Text display='flex' alignItems='center'>\r\n              <Icon\r\n                color='gray.600'\r\n                as={MdBusinessCenter}\r\n                fontSize='xl'\r\n                mr={2}\r\n              />\r\n              {`Role: ${role}`}\r\n            </Text>\r\n          </HStack>\r\n          <HStack justifyContent='space-between' flexWrap='wrap' my={3} gap={3}>\r\n            <Text display='flex' alignItems='center'>\r\n              <Icon color='gray.600' as={BsGrid1X2Fill} mr={2} />\r\n              {`Floor: ${floor}`}\r\n            </Text>\r\n            <Text\r\n              verticalAlign='middle'\r\n              textAlign={{base: \"left\", md: \"right\"}}\r\n            >\r\n              {`Invoice rate: $${invoice_rate}`}\r\n            </Text>\r\n          </HStack>\r\n          <HStack justifyContent='space-between' flexWrap='wrap' my={3} gap={3}>\r\n            <Text>Start time:</Text>\r\n            <Text\r\n              textAlign={{base: \"left\", md: \"right\"}}\r\n              display='flex'\r\n              alignItems='center'\r\n            >\r\n              <Icon color='gray.600' as={BsClock} mr={2} />\r\n              {`${moment(start_time).format(\"MM/D/YYYY hh:mm A\")}`}\r\n            </Text>\r\n          </HStack>\r\n          <HStack justifyContent='space-between' flexWrap='wrap' my={3} gap={3}>\r\n            <Text>End time:</Text>\r\n            <Text\r\n              textAlign={{base: \"left\", md: \"right\"}}\r\n              display='flex'\r\n              alignItems='center'\r\n            >\r\n              <Icon color='gray.600' as={BsClock} mr={2} />\r\n              {`${moment(end_time).format(\"MM/D/YYYY hh:mm A\")}`}\r\n            </Text>\r\n          </HStack>\r\n        </CardBody>\r\n      </Card>\r\n      <AlertDialog\r\n        motionPreset='slideInBottom'\r\n        leastDestructiveRef={cancelRef}\r\n        onClose={onClose}\r\n        isOpen={isOpen}\r\n        isCentered\r\n      >\r\n        <AlertDialogOverlay />\r\n        <AlertDialogContent>\r\n          <AlertDialogHeader>Cancel Shift</AlertDialogHeader>\r\n          <AlertDialogCloseButton />\r\n          <AlertDialogBody>\r\n            {`Are you sure you want to cancel shift #${id}?`}\r\n          </AlertDialogBody>\r\n          <AlertDialogFooter>\r\n            <Button ref={cancelRef} onClick={onClose}>\r\n              No\r\n            </Button>\r\n            <Button\r\n              colorScheme='red'\r\n              ml={3}\r\n              onClick={() => onCancelShift && onCancelShift(id)}\r\n            >\r\n              Yes\r\n            </Button>\r\n          </AlertDialogFooter>\r\n        </AlertDialogContent>\r\n      </AlertDialog>\r\n    </Box>\r\n  );\r\n};\r\nexport default OpenShiftCard;\r\n","import {MinusIcon, AddIcon} from \"@chakra-ui/icons\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  FormErrorMessage,\r\n  SimpleGrid,\r\n  Card,\r\n  CardBody,\r\n  ButtonGroup,\r\n  IconButton,\r\n  Button,\r\n  Select,\r\n  HStack,\r\n  VStack,\r\n  Input,\r\n  Text,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport {RadioButton, DatePicker} from \"main/components\";\r\nimport moment from \"moment\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {BiDollar} from \"react-icons/bi\";\r\nexport type PostShiftData = {\r\n  role: string;\r\n  needed: number;\r\n  floor: number;\r\n  start_time: number;\r\n  end_time: string;\r\n  am_pm: \"AM\" | \"PM\";\r\n  hours: number;\r\n  date: string;\r\n  invoiceRate: number;\r\n};\r\nconst roleOptions = [\r\n  {value: \"HomeCare Aide\", label: \"CNA\"},\r\n  {value: \"RN\", label: \"RN\"},\r\n  {value: \"LVN | LPN\", label: \"LVN | LPN\"},\r\n];\r\nconst amOptions = [\r\n  {value: \"AM\", label: \"AM\"},\r\n  {value: \"PM\", label: \"PM\"},\r\n];\r\ntype PostShiftFormProps = {\r\n  onSubmit: (data: PostShiftData) => void;\r\n};\r\nconst PostShiftForm = (props: PostShiftFormProps) => {\r\n  const {onSubmit} = props;\r\n  const {handleSubmit, control, formState, setValue, watch} =\r\n    useForm<PostShiftData>({\r\n      defaultValues: {\r\n        role: roleOptions[0].value,\r\n        needed: 1,\r\n        floor: 1,\r\n        start_time: 0,\r\n        hours: 6,\r\n        am_pm: \"AM\",\r\n        date: new Date().toISOString().split(\"T\")[0],\r\n        invoiceRate: 15,\r\n      },\r\n    });\r\n\r\n  return (\r\n    <form onSubmit={(e) => e.preventDefault()} style={{minWidth: 300}}>\r\n      <Controller\r\n        control={control}\r\n        name='role'\r\n        rules={{required: \"Field is required.\"}}\r\n        render={({\r\n          field: {onChange, value = roleOptions[0]?.value},\r\n          fieldState: {error},\r\n        }) => {\r\n          return (\r\n            <FormControl isInvalid={!!error} isRequired>\r\n              <FormLabel>Choose a role</FormLabel>\r\n              <RadioButton\r\n                options={roleOptions}\r\n                value={value}\r\n                onChange={onChange}\r\n                name='role'\r\n                style={{paddingY: 1.5, paddingX: 5, marginX: 3}}\r\n              />\r\n              {error && <FormErrorMessage>{error.message}</FormErrorMessage>}\r\n            </FormControl>\r\n          );\r\n        }}\r\n      />\r\n      <SimpleGrid columns={{base: 1, md: 2}} spacing={8} my={5}>\r\n        <Card>\r\n          <CardBody>\r\n            <Controller\r\n              control={control}\r\n              name='needed'\r\n              rules={{required: \"Field is required.\"}}\r\n              render={({field: {onChange, value = 1}, fieldState: {error}}) => (\r\n                <FormControl isInvalid={!!error} isRequired>\r\n                  <FormLabel>How many shifts are needed?</FormLabel>\r\n                  <ButtonGroup\r\n                    size='md'\r\n                    isAttached\r\n                    variant='outline'\r\n                    rounded='full'\r\n                    border='1px solid lightgray'\r\n                  >\r\n                    <IconButton\r\n                      rounded='full'\r\n                      aria-label='Add to shifts'\r\n                      icon={<MinusIcon />}\r\n                      border={0}\r\n                      _hover={{bg: \"#fff\", color: \"#E3022A\"}}\r\n                      onClick={() => value > 1 && setValue(\"needed\", value - 1)}\r\n                    />\r\n                    <Button _hover={{bg: \"#fff\"}} border={0}>\r\n                      {value}\r\n                    </Button>\r\n                    <IconButton\r\n                      border={0}\r\n                      rounded='full'\r\n                      aria-label='Add to shifts'\r\n                      icon={<AddIcon />}\r\n                      _hover={{bg: \"#fff\", color: \"#E3022A\"}}\r\n                      onClick={() => setValue(\"needed\", value + 1)}\r\n                    />\r\n                  </ButtonGroup>\r\n                  {error && (\r\n                    <FormErrorMessage>{error.message}</FormErrorMessage>\r\n                  )}\r\n                </FormControl>\r\n              )}\r\n            />\r\n          </CardBody>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardBody>\r\n            <Controller\r\n              control={control}\r\n              name='floor'\r\n              rules={{required: \"Field is required.\"}}\r\n              render={({field: {onChange, value = 1}, fieldState: {error}}) => (\r\n                <FormControl isInvalid={!!error} isRequired>\r\n                  <FormLabel>Which floor?</FormLabel>\r\n                  <Select rounded='full' value={value} onChange={onChange}>\r\n                    <option value='1'>Floor 1</option>\r\n                    <option value='2'>Floor 2</option>\r\n                    <option value='3'>Floor 3</option>\r\n                    <option value='4'>Floor 4</option>\r\n                    <option value='5'>Floor 5</option>\r\n                  </Select>\r\n                </FormControl>\r\n              )}\r\n            />\r\n          </CardBody>\r\n        </Card>\r\n      </SimpleGrid>\r\n      <SimpleGrid columns={{base: 1, md: 2}} spacing={8} my={5}>\r\n        <Card>\r\n          <CardBody>\r\n            <FormLabel> Shift start time</FormLabel>\r\n            <HStack alignItems='center'>\r\n              <Controller\r\n                control={control}\r\n                name='start_time'\r\n                rules={{required: \"Field is required.\"}}\r\n                render={({\r\n                  field: {onChange, value = 0},\r\n                  fieldState: {error},\r\n                }) => (\r\n                  <FormControl isInvalid={!!error} isRequired>\r\n                    <Select rounded='full' value={value} onChange={onChange}>\r\n                      <option value='0'>12:00</option>\r\n                      <option value='1'>01:00</option>\r\n                      <option value='2'>02:00</option>\r\n                      <option value='3'>03:00</option>\r\n                      <option value='4'>04:00</option>\r\n                      <option value='5'>05:00</option>\r\n                      <option value='6'>06:00</option>\r\n                      <option value='7'>07:00</option>\r\n                      <option value='8'>08:00</option>\r\n                      <option value='9'>09:00</option>\r\n                      <option value='10'>10:00</option>\r\n                      <option value='11'>11:00</option>\r\n                    </Select>\r\n                  </FormControl>\r\n                )}\r\n              />\r\n              <Controller\r\n                control={control}\r\n                name='am_pm'\r\n                rules={{required: \"Field is required.\"}}\r\n                render={({\r\n                  field: {onChange, value = roleOptions[0]?.value},\r\n                  fieldState: {error},\r\n                }) => {\r\n                  return (\r\n                    <FormControl isInvalid={!!error} isRequired>\r\n                      <RadioButton\r\n                        options={amOptions}\r\n                        value={value}\r\n                        onChange={onChange}\r\n                        name='am_pm'\r\n                        style={{paddingY: 1.5, paddingX: 5}}\r\n                      />\r\n                      {error && (\r\n                        <FormErrorMessage>{error.message}</FormErrorMessage>\r\n                      )}\r\n                    </FormControl>\r\n                  );\r\n                }}\r\n              />\r\n            </HStack>\r\n          </CardBody>\r\n        </Card>\r\n        <Card>\r\n          <CardBody>\r\n            <Controller\r\n              control={control}\r\n              name='hours'\r\n              rules={{required: \"Field is required.\"}}\r\n              render={({field: {onChange, value = 6}, fieldState: {error}}) => (\r\n                <FormControl isInvalid={!!error} isRequired>\r\n                  <FormLabel> Shift hours</FormLabel>\r\n                  <SimpleGrid columns={2} alignItems='center'>\r\n                    <Select rounded='full' value={value} onChange={onChange}>\r\n                      <option value='6'>6 Hours</option>\r\n                      <option value='8'>8 Hours</option>\r\n                      <option value='9'>9 Hours</option>\r\n                      <option value='10'>10 Hours</option>\r\n                      <option value='11'>11 Hours</option>\r\n                      <option value='12'>12 Hours</option>\r\n                    </Select>\r\n                    <VStack>\r\n                      <Text wordBreak='normal'>End Time</Text>\r\n                      <Text>\r\n                        {moment(\r\n                          `${\r\n                            (parseInt(\r\n                              moment(\r\n                                `${watch(\"start_time\")} ${watch(\"am_pm\")}`,\r\n                                [\"hh A\"]\r\n                              ).format(\"H\")\r\n                            ) +\r\n                              watch(\"hours\")) %\r\n                            24\r\n                          }}`,\r\n                          [\"H\"]\r\n                        ).format(\"hh:mm A\")}\r\n                      </Text>\r\n                    </VStack>\r\n                  </SimpleGrid>\r\n                </FormControl>\r\n              )}\r\n            />\r\n          </CardBody>\r\n        </Card>\r\n      </SimpleGrid>\r\n      <Card>\r\n        <CardBody>\r\n          <Controller\r\n            control={control}\r\n            name='date'\r\n            rules={{required: \"Field is required.\"}}\r\n            render={({\r\n              field: {onChange, value = new Date().toString()},\r\n              fieldState: {error},\r\n            }) => {\r\n              return (\r\n                <FormControl isInvalid={!!error} isRequired>\r\n                  <FormLabel>Choose a date</FormLabel>\r\n                  <DatePicker\r\n                    value={value}\r\n                    onChangeDate={onChange}\r\n                    isInput={true}\r\n                  />\r\n                  {error && (\r\n                    <FormErrorMessage>{error.message}</FormErrorMessage>\r\n                  )}\r\n                </FormControl>\r\n              );\r\n            }}\r\n          />\r\n        </CardBody>\r\n      </Card>\r\n      <Card mt={5}>\r\n        <CardBody>\r\n          <Controller\r\n            control={control}\r\n            name='invoiceRate'\r\n            rules={{required: \"Field is required.\"}}\r\n            render={({field: {onChange, value = 15}, fieldState: {error}}) => {\r\n              return (\r\n                <FormControl isInvalid={!!error} isRequired>\r\n                  <Box\r\n                    display='flex'\r\n                    justifyContent='space-between'\r\n                    flexWrap='wrap'\r\n                  >\r\n                    <FormLabel>Invoice Rate</FormLabel>\r\n                    <ButtonGroup\r\n                      size='md'\r\n                      isAttached\r\n                      variant='outline'\r\n                      rounded='lg'\r\n                      border='1px solid lightgray'\r\n                      alignItems='center'\r\n                    >\r\n                      <IconButton\r\n                        rounded='full'\r\n                        aria-label='Add to shifts'\r\n                        icon={<BiDollar />}\r\n                        border={0}\r\n                        _hover={{bg: \"#fff\"}}\r\n                      />\r\n                      <Input\r\n                        size='sm'\r\n                        type='number'\r\n                        min={15}\r\n                        maxWidth={50}\r\n                        value={value}\r\n                        onChange={onChange}\r\n                        border={0}\r\n                        _active={{outline: 0, border: 0}}\r\n                      />\r\n                      <IconButton\r\n                        border={0}\r\n                        rounded='full'\r\n                        aria-label='Add to shifts'\r\n                        _hover={{bg: \"#fff\"}}\r\n                        icon={<Text>/Hr</Text>}\r\n                      />\r\n                    </ButtonGroup>\r\n                  </Box>\r\n\r\n                  {error && (\r\n                    <FormErrorMessage>{error.message}</FormErrorMessage>\r\n                  )}\r\n                </FormControl>\r\n              );\r\n            }}\r\n          />\r\n        </CardBody>\r\n      </Card>\r\n      <VStack spacing={5}>\r\n        <HStack>\r\n          <Button\r\n            isLoading={formState.isSubmitting}\r\n            backgroundColor='#E3022A'\r\n            px={8}\r\n            color={\"#fff\"}\r\n            variant='solid'\r\n            onClick={handleSubmit(onSubmit)}\r\n            marginTop={8}\r\n            width={\"100%\"}\r\n            sx={{\"&:hover\": {backgroundColor: \"#CC0024\"}}}\r\n          >\r\n            Post Shifts\r\n          </Button>\r\n        </HStack>\r\n      </VStack>\r\n    </form>\r\n  );\r\n};\r\nexport default PostShiftForm;\r\n","import {\r\n  Alert,\r\n  AlertIcon,\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Flex,\r\n  HStack,\r\n  Heading,\r\n  Modal,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  SimpleGrid,\r\n  Spinner,\r\n  Text,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport { api } from \"main/configs/axios.config\";\r\nimport { DatePicker } from \"main/components\";\r\nimport OpenShiftCard from \"main/views/shifts/open-shifts\";\r\nimport moment from \"moment\";\r\nimport { ShiftDTO } from \"main/models\";\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\r\nimport PostShiftForm, { PostShiftData } from \"main/views/dashboard/PostShiftForm\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\ntype DashboardData = {\r\n  canceled_shifts: number;\r\n  hired_shifts: number;\r\n  open_shifts: number;\r\n  invoices_past_due: number;\r\n};\r\n\r\nconst Facility = () => {\r\n  const [date, setDate] = useState<string>(moment().toDate().toString());\r\n  const [data, setData] = useState<DashboardData>();\r\n  const [shiftsLoading, setShiftsLoading] = useState<boolean>(true);\r\n  const [shifts, setShifts] = useState<ShiftDTO[]>();\r\n  const { isOpen, onClose, onOpen } = useDisclosure();\r\n\r\n  const getData = useCallback(async () => {\r\n    const result: any = await api.get(\"facilities/dashboard\");\r\n    setData(result);\r\n  }, []);\r\n\r\n  const getShifts = useCallback(async (shiftDate: Date) => {\r\n    const result: any = await api.get(\"facilities/shifts/opened\", {\r\n      params: {\r\n        date: moment(shiftDate).format(\"YYYY-MM-DD\").toString(),\r\n        time_zone: moment().format(\"Z\"),\r\n      },\r\n    });\r\n    setShifts(result);\r\n    setShiftsLoading(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [getData]);\r\n\r\n  useEffect(() => {\r\n    handleChangeDate(date);\r\n  }, [date]);\r\n\r\n  const handleChangeDate = async (value: string) => {\r\n    setShiftsLoading(true);\r\n    getShifts(moment(value).toDate());\r\n  };\r\n  const handlePostShift = async (data: PostShiftData) => {\r\n    const { role, needed, invoiceRate, floor, hours, date, start_time, am_pm } =\r\n      data;\r\n    const result = await api.post(\"facilities/shifts/request\", {\r\n      role: `${role}`,\r\n      needed: `${needed}`,\r\n      invoiceRate: `${invoiceRate}`,\r\n      floor: `${floor}`,\r\n      hours: `${hours}`,\r\n      date_time: `${date} ${moment(`${start_time} ${am_pm}`, [\"h:mm A\"]).format(\r\n        \"HH:mm:ss\"\r\n      )}`,\r\n      time_zone: moment().format(\"Z\").toString(),\r\n    });\r\n    if (result) {\r\n      toast.success(\"Shifts posted successfully.\");\r\n      date === moment().format(\"YYYY-MM-DD\").toString() &&\r\n        getShifts(moment().toDate());\r\n      onClose();\r\n    }\r\n  };\r\n  const handleCancelShift = async (shiftId: number) => {\r\n    const result = await api.post(\r\n      \"facilities/shifts/cancel\",\r\n      {},\r\n      { params: { shift_id: shiftId } }\r\n    );\r\n    if (result) {\r\n      toast.success(`Shift #${shiftId}  canceled successfully.`);\r\n      getShifts(moment().toDate());\r\n      onClose();\r\n    }\r\n  };\r\n  return (\r\n    <div className='App'>\r\n      <Flex flexDir='row' flexWrap='wrap' gap={8} justifyContent='center'>\r\n        <Card bg='#fff' textAlign='center' boxShadow='md' width={220}>\r\n          <CardBody>\r\n            <Heading size='sm'>Canceled Shifts</Heading>\r\n            <Heading\r\n              fontWeight={\"semibold\"}\r\n              variant={\"body\"}\r\n              size={\"md\"}\r\n              my={2}\r\n            >\r\n              {!data ? <Spinner color='red.500' /> : data.canceled_shifts}\r\n            </Heading>\r\n            <Text color='GrayText' my={2}>\r\n              This Week\r\n            </Text>\r\n            <Link to='/facility/canceled-reported'><Button\r\n              px={8}\r\n              color='gray.600'\r\n              size='sm'\r\n              variant='outline'\r\n              sx={{ borderRadius: 3 }}\r\n              rounded='full'\r\n              mt={3}\r\n            >\r\n              View\r\n            </Button></Link>\r\n          </CardBody>\r\n        </Card>\r\n\r\n        <Card bg='#fff' textAlign='center' boxShadow='md' width={220}>\r\n          <CardBody>\r\n            <Heading size='sm'>Hired Shifts</Heading>\r\n            <Heading\r\n              fontWeight={\"semibold\"}\r\n              variant={\"body\"}\r\n              size={\"md\"}\r\n              my={2}\r\n            >\r\n              {!data ? <Spinner color='red.500' /> : data.hired_shifts}\r\n            </Heading>\r\n            <Text color='GrayText' my={2}>\r\n              This Week\r\n            </Text>\r\n            <Link to='/facility/shifts' state={{ shiftTab: 1 }}><Button\r\n              px={8}\r\n              color='gray.600'\r\n              size='sm'\r\n              variant='outline'\r\n              sx={{ borderRadius: 3 }}\r\n              rounded='full'\r\n              mt={3}\r\n            >\r\n              View\r\n            </Button></Link>\r\n          </CardBody>\r\n        </Card>\r\n        <Card bg='#fff' textAlign='center' boxShadow='md' width={220}>\r\n          <CardBody>\r\n            <Heading size='sm'>Unfilled(Open) Shifts</Heading>\r\n            <Heading\r\n              fontWeight={\"semibold\"}\r\n              variant={\"body\"}\r\n              size={\"md\"}\r\n              my={2}\r\n            >\r\n              {!data ? <Spinner color='red.500' /> : data.open_shifts}\r\n            </Heading>\r\n            <Text color='GrayText' my={2}>\r\n              This Week\r\n            </Text>\r\n            <Link to='/facility/shifts' state={{ shiftTab: 0 }}><Button\r\n              px={8}\r\n              color='gray.600'\r\n              size='sm'\r\n              variant='outline'\r\n              sx={{ borderRadius: 3 }}\r\n              rounded='full'\r\n              mt={3}\r\n            >\r\n              View\r\n            </Button></Link>\r\n          </CardBody>\r\n        </Card>\r\n        <Card bg='#fff' textAlign='center' boxShadow='md' width={220}>\r\n          <CardBody>\r\n            <Heading size='sm'>Invoice</Heading>\r\n            <Heading\r\n              fontWeight={\"semibold\"}\r\n              variant={\"body\"}\r\n              size={\"md\"}\r\n              my={2}\r\n            >\r\n              {!data ? (\r\n                <Spinner color='red.500' />\r\n              ) : (\r\n                `$${data.invoices_past_due}`\r\n              )}\r\n            </Heading>\r\n            <Text color='GrayText' my={2}>\r\n              Past Due\r\n            </Text>\r\n            <Link to='/facility/invoices-current'><Button\r\n              px={8}\r\n              color='gray.600'\r\n              size='sm'\r\n              variant='outline'\r\n              sx={{ borderRadius: 3 }}\r\n              rounded='full'\r\n              mt={3}\r\n            >\r\n              View\r\n            </Button></Link>\r\n          </CardBody>\r\n        </Card>\r\n      </Flex>\r\n      <HStack my={8}>\r\n        <Button\r\n          colorScheme='red'\r\n          bg='#E3022A'\r\n          mx='auto'\r\n          px={16}\r\n          onClick={onOpen}\r\n        >\r\n          Post New Shift\r\n        </Button>\r\n      </HStack>\r\n      <SimpleGrid columns={{ base: 1, md: 2 }} gap={8}>\r\n        <DatePicker value={date} onChangeDate={setDate} />\r\n        <Card bg='#fff' py={5} boxShadow='md'>\r\n          <CardHeader>\r\n            <Heading fontSize='2xl'>Open Shifts</Heading>\r\n          </CardHeader>\r\n          <CardBody maxHeight={{ base: \"100%\", md: 300 }}>\r\n            <PerfectScrollbar\r\n              options={{ wheelPropagation: false, swipeEasing: true }}\r\n            >\r\n              <Box px={5}>\r\n                {shiftsLoading ? (\r\n                  <Flex justifyContent='center'>\r\n                    <Spinner color='red.500' />\r\n                  </Flex>\r\n                ) : shifts && shifts.length > 0 ? (\r\n                  shifts.map((shift: any) => (\r\n                    <OpenShiftCard\r\n                      key={shift.id}\r\n                      shift={shift}\r\n                      onCancelShift={handleCancelShift}\r\n                    />\r\n                  ))\r\n                ) : (\r\n                  <Alert\r\n                    status='warning'\r\n                    mx={{ base: 5, md: 0 }}\r\n                    borderRadius={\"md\"}\r\n                  >\r\n                    <AlertIcon />\r\n                    No shifts found.\r\n                  </Alert>\r\n                )}\r\n              </Box>\r\n            </PerfectScrollbar>\r\n          </CardBody>\r\n        </Card>\r\n      </SimpleGrid>\r\n      <Modal isOpen={isOpen} onClose={onClose} size='3xl'>\r\n        <ModalOverlay />\r\n        <ModalContent mx={{ base: 5, md: 0 }}>\r\n          <ModalHeader></ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody mb={5}>\r\n            <PostShiftForm onSubmit={handlePostShift} />\r\n          </ModalBody>\r\n        </ModalContent>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Facility;\r\n","import {\r\n  Alert,\r\n  AlertIcon,\r\n  Box,\r\n  Button,\r\n  Collapse,\r\n  FormControl,\r\n  FormErrorMessage,\r\n  FormLabel,\r\n  Input,\r\n  InputGroup,\r\n  InputRightElement,\r\n  Text,\r\n  VStack,\r\n  useDisclosure,\r\n  useOutsideClick,\r\n} from \"@chakra-ui/react\";\r\nimport { addPointerEvent } from \"framer-motion\";\r\nimport { api } from \"main/configs/axios.config\";\r\nimport { updateUser, userData } from \"main/store/features/auth\";\r\nimport React, { useRef, useState } from \"react\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\ntype AccountData = {\r\n  facility_name: string;\r\n  address: string;\r\n  email: string;\r\n  long: number;\r\n  lat: number;\r\n  city: string;\r\n  country: string;\r\n  state: string;\r\n  postal_code: string;\r\n  company_email: string;\r\n  phone: string;\r\n};\r\nconst Account = () => {\r\n  const [placePredictions, setPlacePredictions] = useState<any[]>();\r\n  const { handleSubmit, control, setValue, formState, setError } =\r\n    useForm<AccountData>();\r\n  let {\r\n    facility_name,\r\n    address,\r\n    email,\r\n    lat,\r\n    lng,\r\n    country,\r\n    state,\r\n    city,\r\n    postal_code,\r\n    company_email,\r\n    phone,\r\n  } = useSelector(userData);\r\n\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const dispatch = useDispatch();\r\n  const onSubmit = async (data: any) => {\r\n\r\n    // handleLogin(data);\r\n    const res = await api.put('facilities/account', undefined, {\r\n      params: data\r\n    });\r\n\r\n    if (res.status.toString() === \"successs\") {\r\n      toast.success(\"Account updated successfully.\");\r\n      dispatch(updateUser(data));\r\n    }\r\n  };\r\n\r\n  const ref = useRef<any>(null);\r\n\r\n  useOutsideClick({\r\n    ref: ref,\r\n    handler: () => onClose(),\r\n  });\r\n  const handleGetAddress = async (search: string) => {\r\n    const data: any = await api.get(\"location-suggestions\", {\r\n      params: { search },\r\n    });\r\n    setPlacePredictions(data);\r\n    onOpen();\r\n  };\r\n  const handleAddressSelect = (item: any) => {\r\n    setValue(\"address\", item.place_name);\r\n    setValue(\"long\", item.longitude);\r\n    setValue(\"lat\", item.latitude);\r\n    setValue(\"country\", item.country);\r\n    setValue(\"city\", item.city);\r\n    setValue(\"state\", item.state);\r\n    setValue(\"postal_code\", item.postal_code);\r\n    onClose();\r\n  };\r\n  return (\r\n    <Box bg='#fff' rounded='lg' p={20} w={{ base: \"100%\", md: \"70%\" }} mx='auto'>\r\n      <form onSubmit={(e) => e.preventDefault()} style={{ minWidth: 300 }}>\r\n        <VStack spacing={8}>\r\n          <Controller\r\n            control={control}\r\n            defaultValue={facility_name}\r\n            name='facility_name'\r\n            rules={{ required: \"Field is required.\" }}\r\n            render={({ field: { onChange, value = \"\" }, fieldState: { error } }) => (\r\n              <FormControl isInvalid={!!error} isRequired>\r\n                <FormLabel size='sm'>Facility Name:</FormLabel>\r\n                <Input\r\n                  size='md'\r\n                  type='text'\r\n                  value={value}\r\n                  onChange={onChange}\r\n                />\r\n                {error && <FormErrorMessage>{error.message}</FormErrorMessage>}\r\n              </FormControl>\r\n            )}\r\n          />\r\n          <Controller\r\n            control={control}\r\n            name='address'\r\n            defaultValue={address}\r\n            rules={{ required: \"Field is required.\" }}\r\n            render={({ field: { onChange, value = \"\" }, fieldState: { error } }) => (\r\n              <FormControl isInvalid={!!error} isRequired>\r\n                <FormLabel size='sm'>Facility Address:</FormLabel>\r\n                <InputGroup position={\"relative\"} zIndex={9}>\r\n                  <Input\r\n                    textOverflow={\"clip\"}\r\n                    value={value}\r\n                    onChange={(evt: any) => {\r\n                      evt.target.value.length === 0 && onClose();\r\n                      onChange(evt.target.value);\r\n                      handleGetAddress(evt.target.value);\r\n                    }}\r\n                    type='text'\r\n                    sx={{\r\n                      padding: \"0.4375rem 1rem\",\r\n                    }}\r\n                    size='md'\r\n                  />\r\n                  <Collapse ref={ref} in={isOpen}>\r\n                    <Box\r\n                      position='absolute'\r\n                      left={0}\r\n                      right={0}\r\n                      top={\"100%\"}\r\n                      bg={\"white\"}\r\n                      zIndex='popover'\r\n                      sx={{\r\n                        maxHeight: \"120px\",\r\n                        overflowY: \"scroll\",\r\n                        backgroundColor: \"#fff\",\r\n                        border: \"1px solid #E2E8F0\",\r\n                        borderRadius: 5,\r\n                      }}\r\n                    >\r\n                      {placePredictions?.length === 0 && (\r\n                        <Alert\r\n                          status='warning'\r\n                          mx={{ base: 5, md: 0 }}\r\n                          borderRadius={\"md\"}\r\n                        >\r\n                          <AlertIcon />\r\n                          No records.\r\n                        </Alert>\r\n                      )}\r\n                      {placePredictions?.map((item: any) => {\r\n                        return (\r\n                          <Text\r\n                            key={item.place_id}\r\n                            borderBottom={\"1px solid #E2E8F0\"}\r\n                            onClick={() => {\r\n                              handleAddressSelect(item);\r\n                            }}\r\n                            p={2}\r\n                            sx={{\r\n                              \"&:hover\": {\r\n                                backgroundColor: \"#E3022A\",\r\n                                color: \"#fff\",\r\n                                transition: \"background 0.2s ease\",\r\n                                cursor: \"pointer\",\r\n                              },\r\n                            }}\r\n                          >\r\n                            {item.place_name}\r\n                          </Text>\r\n                        );\r\n                      })}\r\n                    </Box>\r\n                  </Collapse>\r\n                </InputGroup>\r\n                {error && <FormErrorMessage>{error.message}</FormErrorMessage>}\r\n              </FormControl>\r\n            )}\r\n          />\r\n          <Controller\r\n            control={control}\r\n            name='email'\r\n            defaultValue={email}\r\n            rules={{ required: \"Field is required.\" }}\r\n            render={({ field: { onChange, value = \"\" }, fieldState: { error } }) => (\r\n              <FormControl isInvalid={!!error} isRequired>\r\n                <FormLabel size='sm'>E-mail:</FormLabel>\r\n                <Input\r\n                  type='text'\r\n                  size='md'\r\n                  value={value}\r\n                  onChange={onChange}\r\n                />\r\n                {error && <FormErrorMessage>{error.message}</FormErrorMessage>}\r\n              </FormControl>\r\n            )}\r\n          />\r\n\r\n          <Controller\r\n            control={control}\r\n            name='company_email'\r\n            defaultValue={company_email}\r\n            rules={{ required: \"Field is required.\" }}\r\n            render={({ field: { onChange, value = \"\" }, fieldState: { error } }) => (\r\n              <FormControl isInvalid={!!error} isRequired>\r\n                <FormLabel size='sm'>Company Email Adress:</FormLabel>\r\n\r\n                <Input\r\n                  type='text'\r\n                  size='md'\r\n                  value={value}\r\n                  onChange={onChange}\r\n                />\r\n\r\n                {error && <FormErrorMessage>{error.message}</FormErrorMessage>}\r\n              </FormControl>\r\n            )}\r\n          />\r\n          <Controller\r\n            control={control}\r\n            name='phone'\r\n            defaultValue={phone}\r\n            rules={{ required: \"Field is required.\" }}\r\n            render={({ field: { onChange, value = \"\" }, fieldState: { error } }) => (\r\n              <FormControl isInvalid={!!error} isRequired>\r\n                <FormLabel size='sm'>Phone Number:</FormLabel>\r\n\r\n                <Input\r\n                  type='text'\r\n                  size='md'\r\n                  value={value}\r\n                  onChange={onChange}\r\n                />\r\n\r\n                {error && <FormErrorMessage>{error.message}</FormErrorMessage>}\r\n              </FormControl>\r\n            )}\r\n          />\r\n\r\n          <Controller\r\n            control={control}\r\n            name='lat'\r\n            defaultValue={lat}\r\n            render={({ field: { onChange, value = \"\" }, fieldState: { error } }) => (\r\n              <></>\r\n            )}\r\n          />\r\n\r\n          <Controller\r\n            control={control}\r\n            name='city'\r\n            defaultValue={city}\r\n            render={({ field: { onChange, value = \"\" }, fieldState: { error } }) => (\r\n              <></>\r\n            )}\r\n          />\r\n          <Controller\r\n            control={control}\r\n            name='postal_code'\r\n            defaultValue={postal_code}\r\n            render={({ field: { onChange, value = \"\" }, fieldState: { error } }) => (\r\n              <></>\r\n            )}\r\n          />\r\n\r\n          <Controller\r\n            control={control}\r\n            name='long'\r\n            defaultValue={lng}\r\n            render={({ field: { onChange, value = \"\" }, fieldState: { error } }) => (\r\n              <></>\r\n            )}\r\n          />\r\n          <Controller\r\n            control={control}\r\n            name='state'\r\n            defaultValue={state}\r\n            render={({ field: { onChange, value = \"\" }, fieldState: { error } }) => (\r\n              <></>\r\n            )}\r\n          />\r\n          <Controller\r\n            control={control}\r\n            name='country'\r\n            defaultValue={country}\r\n            render={({ field: { onChange, value = \"\" }, fieldState: { error } }) => (\r\n              <></>\r\n            )}\r\n          />\r\n          <Button\r\n            backgroundColor='#E3022A'\r\n            color={\"#fff\"}\r\n            variant='solid'\r\n            onClick={handleSubmit(onSubmit)}\r\n            marginTop={10}\r\n            width={\"100%\"}\r\n            sx={{ \"&:hover\": { backgroundColor: \"#CC0024\" } }}\r\n            size='md'\r\n            disabled={!formState.isDirty}\r\n          >\r\n            Update\r\n          </Button>\r\n        </VStack>\r\n      </form>\r\n    </Box>\r\n  );\r\n};\r\nexport default Account;\r\n","import {\r\n    Button,\r\n    Flex,\r\n    Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport { ReactElement, useCallback, useEffect, useRef, useState } from \"react\";\r\n\r\nimport { api } from \"main/configs/axios.config\";\r\nimport { utc } from \"moment\"; import { PDFCheckBox, PDFDocument, PDFTextField } from 'pdf-lib';\r\nimport moment from \"moment\";\r\nimport { ContractDetailsType } from \"./detail\";\r\nimport { useFormContext } from \"react-hook-form\";\r\n// import {NextPageWithLayout} from \"main/configs/page.config\";\r\n\r\ntype ContractPdfProps = {\r\n    onSubmit: () => void;\r\n    signed: boolean;\r\n}\r\nconst ContractPdf = (props: ContractPdfProps) => {\r\n    const { onSubmit, signed } = props;\r\n    const [frameBytes, setFrameBytes] = useState<any>();\r\n    const { watch, formState, getValues } = useFormContext<ContractDetailsType>();\r\n    const ref = useRef<any>(null)\r\n    const readPdf = useCallback(async () => {\r\n        const existingPdfBytes = await fetch('/contract.pdf').then((res) => res.arrayBuffer());\r\n        const pdfDoc = await PDFDocument.load(existingPdfBytes);\r\n        const form = pdfDoc.getForm();\r\n        const fields = form.getFields();\r\n        fields.forEach((field: any) => {\r\n            const now = new Date();\r\n            if (field instanceof PDFCheckBox) {\r\n                field.check()\r\n            }\r\n            if (field instanceof PDFTextField) {\r\n                field.getName() === 'a1' && field.setText(`  ${moment(now).format(\"DD\").toString()}`);\r\n                field.getName() === 'a2' && field.setText(`  ${moment(now).format(\"MMM\").toString()}`);\r\n                field.getName() === 'a3' && field.setText(`  ${moment(now).format(\"YYYY\").toString()}`);\r\n                field.getName() === 'a4' && field.setText(`  ${getValues('company_name')}`);\r\n\r\n                field.getName() === 'a5' && field.setText(`  ${getValues('state')}`);\r\n\r\n                field.getName() === 'a6' && field.setText(`  ${getValues('address')}`);\r\n\r\n                (field.getName() === 'a7' || field.getName() === 'a8') && field.setText(`${getValues('facility_name')}`);\r\n                (field.getName() === 'a10' || field.getName() === 'a16' || field.getName() === 'a26') && field.setText(`  ${getValues('admin_name')}, ${getValues('admin_title')}`);\r\n\r\n                (field.getName() === 'a11' || field.getName() === 'a14' || field.getName() === 'a17' || field.getName() === 'a20' || field.getName() === 'a27' || field.getName() === 'a30') && field.setText(`  ${moment(now).format(\"DD/MM/YYYY\")}`);\r\n            }\r\n            field.enableReadOnly();\r\n        });\r\n        const signature_base64 = getValues('signature_base64')\r\n\r\n        if (signature_base64 && signature_base64.length > 0) {\r\n            const dataUrl = `data:image/jpeg;base64,${signature_base64}`\r\n            const signatureBytes = await fetch(\"/assets/signature.png\").then((res) =>\r\n                res.arrayBuffer()\r\n            );\r\n            const imgBytes = await fetch(dataUrl).then((res) =>\r\n                res.arrayBuffer()\r\n            );\r\n            const img = await pdfDoc.embedPng(imgBytes);\r\n            const signatureImage = await pdfDoc.embedPng(signatureBytes);\r\n            //adding signture to pdf pages\r\n            for (let i = 0; i < pdfDoc.getPageCount();) {\r\n\r\n                //We need to add the signture on page 0 and 3 and 5 only\r\n                if (i != 1 && i != 2 && i != 4) {\r\n                    const imagePage = pdfDoc.getPage(i);\r\n                    imagePage.drawImage(img, {\r\n                        x: 60,\r\n                        //every page has different Y position\r\n                        y: ((i == 3) ? 170 : ((i == 5) ? 190 : 205)),\r\n\r\n                        //Image must be static 100 width, 50 height\r\n                        width: 100,\r\n                        height: 50\r\n                    });\r\n                }\r\n                i++\r\n            }\r\n            //adding signture to pdf pages\r\n            for (let i = 0; i < pdfDoc.getPageCount();) {\r\n\r\n                //We need to add the signture on page 0 and 3 and 5 only\r\n                if (i != 1 && i != 2 && i != 4) {\r\n                    const imagePage = pdfDoc.getPage(i);\r\n                    imagePage.drawImage(signatureImage, {\r\n                        x: 60,\r\n                        //every page has different Y position\r\n                        y: ((i == 3) ? 90 : ((i == 5) ? 130 : 135)),\r\n\r\n                        //Image must be static 100 width, 50 height\r\n                        width: 100,\r\n                        height: 50\r\n                    });\r\n                }\r\n                i++\r\n            }\r\n        }\r\n        form.flatten();\r\n        const pdfBytes = await pdfDoc.save();\r\n        const frameToBytes = await pdfDoc.saveAsBase64({ dataUri: true });\r\n        setFrameBytes(frameToBytes);\r\n        // setBytes(pdfBytes);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        readPdf();\r\n    }, [readPdf, watch('signature_base64')]);\r\n    return (\r\n\r\n        <Flex minH={\"80vh\"} w='100%' justifyContent='center' rounded='md' alignItems='center' bg='#fff' p={{ base: 5, md: 10 }} ref={ref} flexDir='column'>\r\n            {frameBytes ? <> <iframe id=\"contract\" style={{ width: '100%', height: '60vh' }} src={frameBytes}></iframe><Flex>\r\n                <Button\r\n                    backgroundColor='#E3022A'\r\n                    color={\"#fff\"}\r\n                    variant='solid'\r\n                    onClick={onSubmit}\r\n                    marginTop={4}\r\n                    width={\"100%\"}\r\n                    mx='auto'\r\n                    my={8}\r\n                    sx={{ \"&:hover\": { backgroundColor: \"#CC0024\" } }}\r\n                >\r\n                    {signed ? 'Choose Payment Method' : ' Sign Contract'}\r\n                </Button>\r\n            </Flex></> : <Spinner color=\"red\" />}\r\n\r\n        </Flex>\r\n    );\r\n};\r\nexport default ContractPdf;\r\n","import {\r\n    FormControl,\r\n    FormLabel,\r\n    FormErrorMessage,\r\n    Input,\r\n    Button,\r\n    Center,\r\n    Container,\r\n    Flex,\r\n    Box,\r\n    InputRightElement,\r\n    InputGroup,\r\n    VStack,\r\n    Image,\r\n    Text,\r\n    SimpleGrid,\r\n    Alert,\r\n    AlertIcon,\r\n    Collapse,\r\n    useDisclosure,\r\n    useOutsideClick,\r\n    Heading,\r\n} from \"@chakra-ui/react\";\r\nimport { useForm, Controller, useFormContext } from \"react-hook-form\";\r\nimport { ViewIcon, ViewOffIcon } from \"@chakra-ui/icons\";\r\nimport { ReactElement, useEffect, useRef, useState } from \"react\";\r\nimport { useAuth } from \"main/hooks\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { api } from \"main/configs/axios.config\";\r\nimport { ContractDetailsType } from \"./detail\";\r\n// import {NextPageWithLayout} from \"main/configs/page.config\";\r\nexport type ContractCanvasType = {\r\n    facility_name: string;\r\n    address: string;\r\n    company_name: string;\r\n    lat: string;\r\n    long: string;\r\n    state: string;\r\n    city: string;\r\n    country: string;\r\n    postal_code: string;\r\n    company_email: string;\r\n    admin_name: string;\r\n    title: string;\r\n}\r\ntype ContractCanvasProps = {\r\n    onSubmit: () => void;\r\n}\r\nconst ContractCanvas = (props: ContractCanvasProps) => {\r\n    const { onSubmit } = props;\r\n    const [cStep, setCStep] = useState<number>(-1)\r\n    const [cPushArray, setCPushArray] = useState<string[]>([])\r\n    const [coord, setCoord] = useState({ x: 0, y: 0 })\r\n    const [isDrawing, setIsDrawing] = useState<boolean>(false)\r\n    const canvasRef = useRef<any>(null)\r\n    const refContainer = useRef<any>(null)\r\n\r\n    const { getValues, setValue } = useFormContext<ContractDetailsType>();\r\n\r\n    const cPush = () => {\r\n        const canvas = canvasRef.current;\r\n        if (canvas) {\r\n            setCPushArray([...cPushArray.filter((d: any, index: number) => index <= cStep), canvasRef.current.toDataURL()])\r\n            setCStep(cStep + 1)\r\n        }\r\n    }\r\n\r\n    const cUndo = () => {\r\n        const canvas = canvasRef.current\r\n        const context = canvas.getContext('2d')\r\n\r\n        if (cStep >= 0) {\r\n            var canvasPic = document.createElement('img');\r\n            canvasPic.src = cPushArray[cStep - 1];\r\n            context.clearRect(0, 0, canvas.width, canvas.height);\r\n            canvasPic.onload = function () { context.drawImage(canvasPic, 0, 0); }\r\n            setCStep(cStep - 1)\r\n        }\r\n    }\r\n\r\n    const cRedo = () => {\r\n        const canvas = canvasRef.current;\r\n        if (canvas) {\r\n            const context = canvas.getContext('2d')\r\n            if (cStep < cPushArray.length - 1) {\r\n\r\n                var canvasPic = document.createElement('img');\r\n                canvasPic.src = cPushArray[cStep + 1];\r\n                context.clearRect(0, 0, canvas.width, canvas.height);\r\n                canvasPic.onload = function () { context.drawImage(canvasPic, 0, 0); }\r\n                setCStep(cStep + 1)\r\n            }\r\n        }\r\n    }\r\n\r\n    const cClear = () => {\r\n        const canvas = canvasRef.current\r\n        if (canvas) {\r\n            const context = canvas.getContext('2d')\r\n            context.clearRect(0, 0, canvas.width, canvas.height);\r\n            setCStep(-1)\r\n            setCPushArray([])\r\n        }\r\n    }\r\n\r\n    const resize = () => {\r\n        const canvas = canvasRef.current\r\n        const container = refContainer.current\r\n        if (canvas && container) {\r\n            const context = canvas.getContext('2d')\r\n            const dimensions = container.getBoundingClientRect();\r\n            context.canvas.width = dimensions.width;\r\n            context.canvas.height = dimensions.height;\r\n            if (cStep > 0) {\r\n                var canvasPic = document.createElement('img');\r\n                canvasPic.src = cPushArray[cStep];\r\n                canvasPic.onload = function () { context.drawImage(canvasPic, 0, 0); }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    const start = (event: any) => {\r\n        if (event.target.id === \"signature\") {\r\n            reposition(event);\r\n            setIsDrawing(true)\r\n        }\r\n    }\r\n\r\n    const reposition = (event: any) => {\r\n        const canvas = canvasRef.current\r\n        if (canvas) {\r\n            var rect = canvas.getBoundingClientRect(),\r\n                scaleX = canvas.width / rect.width,\r\n                scaleY = canvas.height / rect.height;\r\n            const newCoord = { x: (event.clientX - rect.left) * scaleX, y: (event.clientY - rect.top) * scaleY }\r\n            setCoord(newCoord)\r\n            return newCoord;\r\n        }\r\n    }\r\n\r\n    const stop = (event: any) => {\r\n        if (event.target.id === \"signature\") {\r\n            cPush();\r\n            setIsDrawing(false)\r\n        }\r\n    }\r\n\r\n    const draw = (event: any) => {\r\n        const canvas = canvasRef.current\r\n        if (canvas && isDrawing) {\r\n            const ctx = canvas.getContext('2d')\r\n            ctx.beginPath();\r\n            ctx.lineWidth = 2;\r\n            ctx.lineCap = 'round';\r\n            ctx.strokeStyle = '#000';\r\n            ctx.moveTo(coord.x, coord.y);\r\n            const newCoord = reposition(event);\r\n            if (newCoord) {\r\n                ctx.lineTo(newCoord.x, newCoord.y);\r\n                ctx.stroke();\r\n            }\r\n\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        document.addEventListener('mousedown', start);\r\n        document.addEventListener('mouseup', stop);\r\n        window.addEventListener('resize', resize);\r\n        document.addEventListener('mousemove', draw);\r\n        return () => {\r\n            document.removeEventListener('mousedown', start);\r\n            document.removeEventListener('mouseup', stop);\r\n            window.removeEventListener('resize', resize);\r\n            document.removeEventListener('mousemove', draw);\r\n        }\r\n    }, [isDrawing, coord, cStep])\r\n\r\n    const handleSubmit = async () => {\r\n        const canvas = canvasRef.current;\r\n        if (canvas) {\r\n            let dataURL = canvas.toDataURL(\"image/png\");\r\n            const signature = dataURL.replace(/^data:image\\/(png|jpg);base64,/, \"\");\r\n            setValue('signature_base64', signature)\r\n        }\r\n        onSubmit()\r\n    }\r\n    return (\r\n        <Flex ref={refContainer} minH={\"80vh\"} w='100%' justifyContent='center' rounded='md' alignItems='center' bg='#fff' p={{ base: 5, md: 10 }} flexDir='column'>\r\n            <Heading size='lg'>Please provide your signature</Heading>\r\n            <Flex gap={3} mt={5}>\r\n                <Button colorScheme='red' variant='ghost' onClick={cUndo}>Undo</Button>\r\n                <Button colorScheme='red' variant='ghost' onClick={cRedo}>Redo</Button>\r\n                <Button colorScheme='red' variant='ghost' onClick={cClear}>Clear</Button>\r\n            </Flex>\r\n            <canvas ref={canvasRef} id=\"signature\" width='400' height='300' />\r\n            <Flex>\r\n                <Button\r\n                    backgroundColor='#E3022A'\r\n                    color={\"#fff\"}\r\n                    variant='solid'\r\n                    onClick={handleSubmit}\r\n                    marginTop={4}\r\n                    width={\"100%\"}\r\n                    mx='auto'\r\n                    my={8}\r\n                    sx={{ \"&:hover\": { backgroundColor: \"#CC0024\" } }}\r\n                >\r\n                    Sign\r\n                </Button>\r\n            </Flex>\r\n        </Flex>\r\n    );\r\n};\r\nexport default ContractCanvas;\r\n","import {\r\n  FormControl,\r\n  FormLabel,\r\n  FormErrorMessage,\r\n  Input,\r\n  Button,\r\n  Center,\r\n  Container,\r\n  Flex,\r\n  Box,\r\n  InputRightElement,\r\n  InputGroup,\r\n  VStack,\r\n  Image,\r\n  Text,\r\n  SimpleGrid,\r\n  Alert,\r\n  AlertIcon,\r\n  Collapse,\r\n  useDisclosure,\r\n  useOutsideClick,\r\n} from \"@chakra-ui/react\";\r\nimport { useForm, Controller, useFormContext } from \"react-hook-form\";\r\nimport { ViewIcon, ViewOffIcon } from \"@chakra-ui/icons\";\r\nimport { ReactElement, useRef, useState } from \"react\";\r\nimport { useAuth } from \"main/hooks\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { api } from \"main/configs/axios.config\";\r\n// import {NextPageWithLayout} from \"main/configs/page.config\";\r\nexport type ContractDetailsType = {\r\n  facility_name: string;\r\n  address: string;\r\n  company_name: string;\r\n  lat: string;\r\n  long: string;\r\n  state: string;\r\n  city: string;\r\n  country: string;\r\n  postal_code: string;\r\n  company_email: string;\r\n  admin_name: string;\r\n  admin_title: string;\r\n  signature_base64: string;\r\n  invoice_option: '1' | '2';\r\n  payment_type?: 'us_bank_account' | 'card';\r\n  billing_name?: string;\r\n  us_bank_account_number?: string;\r\n  us_bank_account_type?: string;\r\n  us_bank_routing_number?: string;\r\n  us_bank_account_holder_type?: 'company';\r\n  number?: string;\r\n  card_exp?: string;\r\n  cvc?: string;\r\n  invoice_day_one?: string;\r\n  invoice_day_two?: string;\r\n}\r\ntype ContractDetailsProps = {\r\n  onSubmit: () => void;\r\n}\r\nconst ContractDetails = (props: ContractDetailsProps) => {\r\n  const { onSubmit } = props;\r\n  const [placePredictions, setPlacePredictions] = useState<any[]>();\r\n  const { control, formState, setValue } = useFormContext<ContractDetailsType>();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n\r\n  const ref = useRef<any>(null);\r\n\r\n  useOutsideClick({\r\n    ref: ref,\r\n    handler: () => onClose(),\r\n  });\r\n\r\n  const handleGetAddress = async (search: string) => {\r\n    const data: any = await api.get(\"location-suggestions\", {\r\n      params: { search },\r\n    });\r\n    setPlacePredictions(data);\r\n    onOpen();\r\n  };\r\n  const handleAddressSelect = (item: any) => {\r\n    setValue(\"address\", item.place_name);\r\n    setValue(\"long\", item.longitude.toString());\r\n    setValue(\"lat\", item.latitude.toString());\r\n    setValue(\"country\", item.country);\r\n    setValue(\"city\", item.city);\r\n    setValue(\"state\", item.state);\r\n    setValue(\"postal_code\", item.postal_code);\r\n    onClose();\r\n  };\r\n  return (\r\n\r\n    <Flex minH={\"80vh\"} w='100%' justifyContent='center' rounded='md' alignItems='center' bg='#fff' p={{ base: 5, md: 10 }}>\r\n      <form onSubmit={(e) => e.preventDefault()} style={{ width: '100%' }}>\r\n        <SimpleGrid spacing={8} columns={{ base: 1, md: 2 }} maxWidth={{ base: '100%', md: '50vw' }} mx='auto'>\r\n          <Controller\r\n            control={control}\r\n            name='facility_name'\r\n            rules={{ required: \"Field is required.\" }}\r\n            render={({ field: { onChange, value }, fieldState: { error } }) => (\r\n              <FormControl isInvalid={!!error} isRequired>\r\n                <FormLabel>Facility Name</FormLabel>\r\n                <Input size='lg' type='text' value={value} onChange={onChange} />\r\n                {error && (\r\n                  <FormErrorMessage>{error.message}</FormErrorMessage>\r\n                )}\r\n              </FormControl>\r\n            )}\r\n          />\r\n          <Controller\r\n            control={control}\r\n            name='address'\r\n            defaultValue=\"\"\r\n            rules={{ required: \"Field is required.\" }}\r\n            render={({ field: { onChange, value = \"\" }, fieldState: { error } }) => (\r\n              <FormControl isInvalid={!!error} isRequired>\r\n                <FormLabel size='sm'>Facility Address</FormLabel>\r\n                <InputGroup position={\"relative\"} zIndex={9}>\r\n                  <Input\r\n                    textOverflow={\"clip\"}\r\n                    value={value}\r\n                    onChange={(evt: any) => {\r\n                      evt.target.value.length === 0 && onClose();\r\n                      onChange(evt.target.value);\r\n                      handleGetAddress(evt.target.value);\r\n                    }}\r\n                    type='text'\r\n                    sx={{\r\n                      padding: \"0.4375rem 1rem\",\r\n                    }}\r\n                    size='lg'\r\n                  />\r\n                  <Collapse ref={ref} in={isOpen}>\r\n                    <Box\r\n                      position='absolute'\r\n                      left={0}\r\n                      right={0}\r\n                      top={\"100%\"}\r\n                      bg={\"white\"}\r\n                      zIndex='popover'\r\n                      sx={{\r\n                        maxHeight: \"120px\",\r\n                        overflowY: \"scroll\",\r\n                        backgroundColor: \"#fff\",\r\n                        border: \"1px solid #E2E8F0\",\r\n                        borderRadius: 5,\r\n                      }}\r\n                    >\r\n                      {placePredictions?.length === 0 && (\r\n                        <Alert\r\n                          status='warning'\r\n                          mx={{ base: 5, md: 0 }}\r\n                          borderRadius={\"md\"}\r\n                        >\r\n                          <AlertIcon />\r\n                          No records.\r\n                        </Alert>\r\n                      )}\r\n                      {placePredictions?.map((item: any) => {\r\n                        return (\r\n                          <Text\r\n                            key={item.place_id}\r\n                            borderBottom={\"1px solid #E2E8F0\"}\r\n                            onClick={() => {\r\n                              handleAddressSelect(item);\r\n                            }}\r\n                            p={2}\r\n                            sx={{\r\n                              \"&:hover\": {\r\n                                backgroundColor: \"#E3022A\",\r\n                                color: \"#fff\",\r\n                                transition: \"background 0.2s ease\",\r\n                                cursor: \"pointer\",\r\n                              },\r\n                            }}\r\n                          >\r\n                            {item.place_name}\r\n                          </Text>\r\n                        );\r\n                      })}\r\n                    </Box>\r\n                  </Collapse>\r\n                </InputGroup>\r\n                {error && <FormErrorMessage>{error.message}</FormErrorMessage>}\r\n              </FormControl>\r\n            )}\r\n          /> <Controller\r\n            control={control}\r\n            name='lat'\r\n            defaultValue=\"\"\r\n            render={({ field: { onChange, value = \"\" }, fieldState: { error } }) => (\r\n              <></>\r\n            )}\r\n          />\r\n\r\n          <Controller\r\n            control={control}\r\n            name='city'\r\n            defaultValue=\"\"\r\n            render={({ field: { onChange, value = \"\" }, fieldState: { error } }) => (\r\n              <></>\r\n            )}\r\n          />\r\n          <Controller\r\n            control={control}\r\n            name='postal_code'\r\n            defaultValue=\"\"\r\n            render={({ field: { onChange, value = \"\" }, fieldState: { error } }) => (\r\n              <></>\r\n            )}\r\n          />\r\n\r\n          <Controller\r\n            control={control}\r\n            name='long'\r\n            defaultValue=\"\"\r\n            render={({ field: { onChange, value = \"\" }, fieldState: { error } }) => (\r\n              <></>\r\n            )}\r\n          />\r\n          <Controller\r\n            control={control}\r\n            name='state'\r\n            defaultValue=\"\"\r\n            render={({ field: { onChange, value = \"\" }, fieldState: { error } }) => (\r\n              <></>\r\n            )}\r\n          />\r\n          <Controller\r\n            control={control}\r\n            name='country'\r\n            defaultValue=\"\"\r\n            render={({ field: { onChange, value = \"\" }, fieldState: { error } }) => (\r\n              <></>\r\n            )}\r\n          />\r\n          <Controller\r\n            control={control}\r\n            name='company_name'\r\n            rules={{ required: \"Field is required.\" }}\r\n            render={({ field: { onChange, value }, fieldState: { error } }) => (\r\n              <FormControl isInvalid={!!error} isRequired>\r\n                <FormLabel>Company Name</FormLabel>\r\n                <Input size='lg' type='text' value={value} onChange={onChange} />\r\n                {error && (\r\n                  <FormErrorMessage>{error.message}</FormErrorMessage>\r\n                )}\r\n              </FormControl>\r\n            )}\r\n          />\r\n          <Controller\r\n            control={control}\r\n            name='company_email'\r\n            rules={{ required: \"Field is required.\" }}\r\n            render={({ field: { onChange, value }, fieldState: { error } }) => (\r\n              <FormControl isInvalid={!!error} isRequired>\r\n                <FormLabel>Company E-mail</FormLabel>\r\n                <Input size='lg' type='text' value={value} onChange={onChange} />\r\n                {error && (\r\n                  <FormErrorMessage>{error.message}</FormErrorMessage>\r\n                )}\r\n              </FormControl>\r\n            )}\r\n          />\r\n          <Controller\r\n            control={control}\r\n            name='admin_name'\r\n            rules={{ required: \"Field is required.\" }}\r\n            render={({ field: { onChange, value }, fieldState: { error } }) => (\r\n              <FormControl isInvalid={!!error} isRequired>\r\n                <FormLabel>Administrator Name</FormLabel>\r\n                <Input size='lg' type='text' value={value} onChange={onChange} />\r\n                {error && (\r\n                  <FormErrorMessage>{error.message}</FormErrorMessage>\r\n                )}\r\n              </FormControl>\r\n            )}\r\n          />\r\n          <Controller\r\n            control={control}\r\n            name='admin_title'\r\n            rules={{ required: \"Field is required.\" }}\r\n            render={({ field: { onChange, value }, fieldState: { error } }) => (\r\n              <FormControl isInvalid={!!error} isRequired>\r\n                <FormLabel>Administrator Title</FormLabel>\r\n                <Input size='lg' type='text' value={value} onChange={onChange} />\r\n                {error && (\r\n                  <FormErrorMessage>{error.message}</FormErrorMessage>\r\n                )}\r\n              </FormControl>\r\n            )}\r\n          />\r\n        </SimpleGrid>\r\n        <Center mx='auto'> <Button\r\n          backgroundColor='#E3022A'\r\n          color={\"#fff\"}\r\n          variant='solid'\r\n          onClick={onSubmit}\r\n          isLoading={formState.isSubmitting}\r\n          marginTop={4}\r\n          mx='auto'\r\n          my={8}\r\n          sx={{ \"&:hover\": { backgroundColor: \"#CC0024\" } }}\r\n        >\r\n          View Contract\r\n        </Button></Center>\r\n      </form>\r\n    </Flex>\r\n  );\r\n};\r\nexport default ContractDetails;\r\n","import {\r\n    FormControl,\r\n    FormLabel,\r\n    FormErrorMessage,\r\n    Input,\r\n    Button,\r\n    Center,\r\n    Container,\r\n    Flex,\r\n    Box,\r\n    InputRightElement,\r\n    InputGroup,\r\n    VStack,\r\n    Image,\r\n    Text,\r\n    SimpleGrid,\r\n    Alert,\r\n    AlertIcon,\r\n    Collapse,\r\n    useDisclosure,\r\n    useOutsideClick,\r\n    Radio,\r\n    RadioGroup,\r\n    Stack,\r\n} from \"@chakra-ui/react\";\r\nimport { useForm, Controller, useFormContext } from \"react-hook-form\";\r\nimport { ViewIcon, ViewOffIcon } from \"@chakra-ui/icons\";\r\nimport { ReactElement, useEffect, useRef, useState } from \"react\";\r\nimport { useAuth } from \"main/hooks\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { api } from \"main/configs/axios.config\";\r\nimport { ContractDetailsType } from \"./detail\";\r\nimport Cleave from 'cleave.js/react';\r\n// import {NextPageWithLayout} from \"main/configs/page.config\";\r\n\r\ntype PaymentDetailsProps = {\r\n    onSubmit: () => void;\r\n}\r\nconst PaymentDetails = (props: PaymentDetailsProps) => {\r\n    const { onSubmit } = props;\r\n    const { control, formState, watch, getValues, setValue } = useFormContext<ContractDetailsType>();\r\n    useEffect(() => {\r\n        setValue('invoice_option', '1');\r\n        setValue('payment_type', 'card');\r\n    }, [])\r\n    return (\r\n        <Flex minH={\"80vh\"} w='100%' justifyContent='center' rounded='md' alignItems='center' bg='#fff' p={{ base: 5, md: 10 }}>\r\n            <form onSubmit={(e) => e.preventDefault()} style={{ width: '100%' }}>\r\n                <VStack maxWidth={{ base: '100%', md: '50vw' }} mx='auto'>\r\n                    <Controller\r\n                        control={control}\r\n                        name='invoice_option'\r\n                        defaultValue=\"1\"\r\n                        rules={{ required: \"Field is required.\" }}\r\n                        render={({ field: { onChange, value }, fieldState: { error } }) => (\r\n                            <FormControl isInvalid={!!error} isRequired>\r\n                                <FormLabel>Please choose a payment method</FormLabel>\r\n                                <RadioGroup defaultValue='1' mt={3} value={value} onChange={onChange}>\r\n                                    <Stack spacing={5} direction='column'>\r\n                                        <Radio colorScheme='red' value='1'>\r\n                                            ACH Auto-Pay; Due date (0% Fee)\r\n                                        </Radio>\r\n                                        <Collapse in={watch('invoice_option') && getValues('invoice_option') === '1'} style={{ width: '100%' }}>\r\n                                            <VStack mx={10} my={5}> <Controller\r\n                                                control={control}\r\n                                                name='payment_type'\r\n                                                defaultValue='card'\r\n                                                rules={{ required: watch('invoice_option') && getValues('invoice_option') === '1' ? \"Field is required.\" : false }}\r\n                                                render={({ field: { onChange, value }, fieldState: { error } }) => (\r\n                                                    <FormControl isInvalid={!!error} isRequired>\r\n                                                        <FormLabel>Payment Type</FormLabel>\r\n                                                        <RadioGroup defaultValue='card' mt={3} value={value} onChange={onChange}>\r\n                                                            <Stack spacing={5} direction='column'>\r\n                                                                <Radio colorScheme='red' value='card'>\r\n                                                                    Card\r\n                                                                </Radio>\r\n                                                                {/* <Radio colorScheme='red' value='us_bank_account' hidden>\r\n                                                                    Invoice Due Twice a Month\r\n                                                                </Radio> */}\r\n                                                            </Stack>\r\n                                                        </RadioGroup>\r\n                                                        {error && (\r\n                                                            <FormErrorMessage>{error.message}</FormErrorMessage>\r\n                                                        )}\r\n                                                    </FormControl>\r\n                                                )}\r\n                                            />\r\n                                                <Controller\r\n                                                    control={control}\r\n                                                    name='billing_name'\r\n                                                    rules={{ required: watch('invoice_option') && getValues('invoice_option') === '1' ? \"Field is required.\" : false }}\r\n                                                    render={({ field: { onChange, value }, fieldState: { error } }) => (\r\n                                                        <FormControl isInvalid={!!error} isRequired>\r\n                                                            <FormLabel>Card Owner</FormLabel>\r\n                                                            <Input size='lg' type='text' value={value} onChange={onChange} />\r\n                                                            {error && (\r\n                                                                <FormErrorMessage>{error.message}</FormErrorMessage>\r\n                                                            )}\r\n                                                        </FormControl>\r\n                                                    )}\r\n                                                />\r\n                                                <Controller\r\n                                                    control={control}\r\n                                                    name='number'\r\n                                                    rules={{ required: watch('invoice_option') && getValues('invoice_option') === '1' ? \"Field is required.\" : false }}\r\n                                                    render={({ field: { onChange, value }, fieldState: { error } }) => (\r\n                                                        <FormControl isInvalid={!!error} isRequired>\r\n                                                            <FormLabel>Card Number</FormLabel>\r\n                                                            {/* <Input size='lg' type='text' value={value} onChange={onChange} /> */}\r\n\r\n                                                            <Cleave options={{ creditCard: true }}\r\n                                                                value={value} onChange={onChange} className=\"chakra-input css-1qrx3zr\" />\r\n                                                            {error && (\r\n                                                                <FormErrorMessage>{error.message}</FormErrorMessage>\r\n                                                            )}\r\n                                                        </FormControl>\r\n                                                    )}\r\n                                                />\r\n                                                <Controller\r\n                                                    control={control}\r\n                                                    name='card_exp'\r\n                                                    rules={{ required: watch('invoice_option') && getValues('invoice_option') === '1' ? \"Field is required.\" : false }}\r\n                                                    render={({ field: { onChange, value }, fieldState: { error } }) => (\r\n                                                        <FormControl isInvalid={!!error} isRequired>\r\n                                                            <FormLabel>Expiry Date</FormLabel>\r\n                                                            <Cleave options={{ date: true, datePattern: ['m', 'y'] }}\r\n                                                                value={value} onChange={onChange} className=\"chakra-input css-1qrx3zr\" />\r\n                                                            {error && (\r\n                                                                <FormErrorMessage>{error.message}</FormErrorMessage>\r\n                                                            )}\r\n                                                        </FormControl>\r\n                                                    )}\r\n                                                />\r\n                                                <Controller\r\n                                                    control={control}\r\n                                                    name='cvc'\r\n                                                    rules={{ required: watch('invoice_option') && getValues('invoice_option') === '1' ? \"Field is required.\" : false }}\r\n                                                    render={({ field: { onChange, value }, fieldState: { error } }) => (\r\n                                                        <FormControl isInvalid={!!error} isRequired>\r\n                                                            <FormLabel>Security Code</FormLabel>\r\n                                                            <Input size='lg' type='number' inputMode=\"numeric\"\r\n                                                                maxLength={4} value={value} onChange={onChange} />\r\n                                                            {error && (\r\n                                                                <FormErrorMessage>{error.message}</FormErrorMessage>\r\n                                                            )}\r\n                                                        </FormControl>\r\n                                                    )}\r\n                                                />\r\n                                            </VStack>\r\n                                        </Collapse>\r\n                                        <Radio colorScheme='red' value='2'>\r\n                                            Invoice Due Twice a Month\r\n                                        </Radio>\r\n                                    </Stack>\r\n                                </RadioGroup>\r\n                                {error && (\r\n                                    <FormErrorMessage>{error.message}</FormErrorMessage>\r\n                                )}\r\n                            </FormControl>\r\n                        )}\r\n                    />\r\n\r\n                    <Collapse in={watch('invoice_option') && getValues('invoice_option') === '2'} style={{ width: '100%' }}>\r\n                        <VStack mx={10} my={5}> <Controller\r\n                            control={control}\r\n                            name='invoice_day_one'\r\n                            defaultValue={'1'}\r\n                            rules={{ required: watch('invoice_option') && getValues('invoice_option') === '2' ? \"Field is required.\" : false }}\r\n                            render={({ field: { onChange, value }, fieldState: { error } }) => (\r\n                                <FormControl isInvalid={!!error} isRequired>\r\n                                    <FormLabel>Invoice Day 1</FormLabel>\r\n                                    <Input size='lg' type='number' min=\"1\" inputMode=\"numeric\"\r\n                                        max={24} value={value} onChange={onChange} step={1} />\r\n                                    {error && (\r\n                                        <FormErrorMessage>{error.message}</FormErrorMessage>\r\n                                    )}\r\n                                </FormControl>\r\n                            )}\r\n                        />\r\n                            <Controller\r\n                                control={control}\r\n                                name='invoice_day_two'\r\n                                defaultValue={'25'}\r\n                                rules={{ required: watch('invoice_option') && getValues('invoice_option') === '2' ? \"Field is required.\" : false }}\r\n                                render={({ field: { onChange, value }, fieldState: { error } }) => (\r\n                                    <FormControl isInvalid={!!error} isRequired>\r\n                                        <FormLabel>Invoice Day 2</FormLabel>\r\n                                        <Input size='lg' min={1}\r\n                                            max=\"25\" type='number' inputMode=\"numeric\" value={value} onChange={onChange} step={1} />\r\n                                        {error && (\r\n                                            <FormErrorMessage>{error.message}</FormErrorMessage>\r\n                                        )}\r\n                                    </FormControl>\r\n                                )}\r\n                            /></VStack>\r\n                    </Collapse>\r\n                </VStack>\r\n                <Center mx='auto'> <Button\r\n                    backgroundColor='#E3022A'\r\n                    color={\"#fff\"}\r\n                    variant='solid'\r\n                    onClick={() => {\r\n                        onSubmit()\r\n                    }}\r\n                    isLoading={formState.isSubmitting}\r\n                    marginTop={4}\r\n                    mx='auto'\r\n                    mt={10}\r\n                    sx={{ \"&:hover\": { backgroundColor: \"#CC0024\" } }}\r\n                >\r\n                    {watch('invoice_option') && getValues('invoice_option') === '2' ? 'Submit' : 'Add Details'}\r\n                </Button></Center>\r\n            </form>\r\n        </Flex>\r\n    );\r\n};\r\nexport default PaymentDetails;\r\n","import { api, contractSubmittedKeyName } from 'main/configs/axios.config';\r\nimport ContractPdf from 'main/views/contract';\r\nimport ContractCanvas from 'main/views/contract/canvas';\r\nimport ContractDetails, { ContractDetailsType } from 'main/views/contract/detail';\r\nimport PaymentDetails from 'main/views/contract/payment';\r\nimport React, { useState } from 'react';\r\nimport { FormProvider, useForm } from 'react-hook-form';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nconst Contract = () => {\r\n  const [status, setStatus] = useState<'details' | 'contract' | 'contract-sign' | 'payment'>('details')\r\n  const [data, setData] = useState<ContractDetailsType>();\r\n  const [isSigned, setIsSigned] = useState<boolean>(false)\r\n  const navigate = useNavigate()\r\n  const methods = useForm<ContractDetailsType>();\r\n  const { getValues, handleSubmit } = methods;\r\n  const handleFormSubmit = async (data: ContractDetailsType) => {\r\n\r\n    const { invoice_option, payment_type, billing_name, us_bank_account_number, us_bank_account_type, us_bank_routing_number, number, cvc, card_exp, invoice_day_one, invoice_day_two, signature_base64, ...rest } = data;\r\n    let [cardExpMonth, cardExpYear] = card_exp ? card_exp.split('/') : ['', ''];\r\n    const response = await api.post('facilities/contract', {\r\n      ...rest,\r\n      invoice_option,\r\n      ...((invoice_option === \"1\") && {\r\n        payment_method: {\r\n          payment_type,\r\n          billing_name,\r\n          ...(payment_type === 'us_bank_account' && {\r\n            us_bank_account: {\r\n              us_bank_account_number,\r\n              us_bank_account_type,\r\n              us_bank_routing_number,\r\n              us_bank_account_holder_type: \"company\"\r\n            },\r\n          }),\r\n          ...(payment_type === 'card' && {\r\n            card: {  //if card so this is required\r\n              number: number ? number.replace(/\\s/g, '') : '',\r\n              exp_month: cardExpMonth,\r\n              exp_year: cardExpYear,\r\n              cvc: cvc,\r\n            }\r\n          }),\r\n\r\n        }\r\n      }),\r\n      ...((invoice_option === \"2\") && {\r\n        invoices_days: {\r\n          invoice_day_one: invoice_day_one ? parseInt(invoice_day_one) : 1,\r\n          invoice_day_two: invoice_day_two ? parseInt(invoice_day_two) : 27\r\n        },\r\n      })\r\n      ,\r\n      signature_base64\r\n    });\r\n    if (response) {\r\n      toast.success(\"Details saved successfully.\");\r\n      localStorage.setItem(contractSubmittedKeyName, JSON.stringify(true))\r\n      navigate('/facility/dashboard', { replace: true });\r\n    }\r\n  }\r\n  const handleErrors = (errors: any) => { console.log('error', errors) }\r\n  return (\r\n    <><FormProvider {...methods}>\r\n      {status === 'details' && <ContractDetails onSubmit={() => { setStatus('contract'); }} />}\r\n      {status === 'contract' && <ContractPdf signed={isSigned} onSubmit={() => { isSigned ? setStatus('payment') : setStatus('contract-sign') }} />}\r\n      {status === 'contract-sign' && <ContractCanvas onSubmit={() => { setStatus('contract'); setIsSigned(true) }} />}\r\n      {status === 'payment' && <PaymentDetails onSubmit={() => {\r\n\r\n        handleSubmit(handleFormSubmit, handleErrors)()\r\n      }} />}</FormProvider>\r\n    </>\r\n  );\r\n}\r\nexport default Contract;\r\n","import React, {useEffect, useRef, useState} from \"react\";\r\nimport {\r\n  Box,\r\n  FlexProps,\r\n  IconButton,\r\n  useBreakpointValue,\r\n  useMediaQuery,\r\n  useTheme,\r\n} from \"@chakra-ui/react\";\r\n// Here we have used react-icons package for the icons\r\nimport {BiLeftArrowAlt, BiRightArrowAlt} from \"react-icons/bi\";\r\n// And react-slick as our Carousel Lib\r\nimport Slider from \"react-slick\";\r\n\r\ntype CarouselProps = {\r\n  gap: number;\r\n  sliderItemWidth: number;\r\n  children: any[];\r\n} & FlexProps;\r\nconst ChakraCarousel = (props: CarouselProps) => {\r\n  const {gap, sliderItemWidth, children, ...style} = props;\r\n  const [settings, setSettings] = useState({\r\n    dots: false,\r\n    arrows: false,\r\n    fade: false,\r\n    infinite: false,\r\n    autoplay: false,\r\n    speed: 500,\r\n    autoplaySpeed: 5000,\r\n    slidesToShow: 7,\r\n    slidesToScroll: 7,\r\n    swipe: true,\r\n  });\r\n\r\n  const [slider, setSlider] = useState<Slider | null>(null);\r\n  const [slides, setSlides] = useState<number>(5);\r\n  const carouselRef = useRef<any>(null);\r\n  const {breakpoints} = useTheme();\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      if (slider?.innerSlider?.list?.clientWidth) {\r\n        const dimensions = slider?.innerSlider?.list?.clientWidth;\r\n        const num: number = dimensions / sliderItemWidth;\r\n        setSettings({...settings, slidesToShow: parseInt(num.toString()) / 2});\r\n      }\r\n    };\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"scroll\", handleResize);\r\n  }, [slider]);\r\n\r\n  useEffect(() => {\r\n    if (slider?.innerSlider?.list?.clientWidth) {\r\n      const dimensions = slider?.innerSlider?.list?.clientWidth - 3;\r\n      const num: number = dimensions / sliderItemWidth;\r\n\r\n      setSettings({...settings, slidesToShow: parseInt(num.toString()) / 2});\r\n    }\r\n  }, [carouselRef, slider]);\r\n  const top = useBreakpointValue({base: \"50%\"});\r\n  const side = useBreakpointValue({base: \"10px\"});\r\n\r\n  return (\r\n    <Box position={\"relative\"} width={\"full\"} overflow={\"hidden\"} {...style}>\r\n      {/* CSS files for react-slick */}\r\n      <link\r\n        rel='stylesheet'\r\n        type='text/css'\r\n        charSet='UTF-8'\r\n        href='https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css'\r\n      />\r\n      <link\r\n        rel='stylesheet'\r\n        type='text/css'\r\n        href='https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css'\r\n      />\r\n\r\n      {/* Left Icon */}\r\n      <IconButton\r\n        aria-label='left-arrow'\r\n        colorScheme='red'\r\n        position='absolute'\r\n        left={side}\r\n        top={top}\r\n        transform={\"translate(0%, -50%)\"}\r\n        zIndex={2}\r\n        onClick={() => slider?.slickPrev()}\r\n      >\r\n        <BiLeftArrowAlt />\r\n      </IconButton>\r\n      {/* Right Icon */}\r\n      <IconButton\r\n        aria-label='right-arrow'\r\n        colorScheme='red'\r\n        position='absolute'\r\n        right={side}\r\n        top={top}\r\n        transform={\"translate(0%, -50%)\"}\r\n        zIndex={2}\r\n        onClick={() => slider?.slickNext()}\r\n      >\r\n        <BiRightArrowAlt />\r\n      </IconButton>\r\n      {/* Slider */}\r\n      <Slider {...settings} ref={(slider) => setSlider(slider)}>\r\n        {children}\r\n      </Slider>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ChakraCarousel;\r\n","import {\r\n  Box,\r\n  Flex,\r\n  SimpleGrid,\r\n  Spinner,\r\n  VStack,\r\n  Text,\r\n  Alert,\r\n  AlertIcon,\r\n  Heading,\r\n  Grid,\r\n  GridItem,\r\n  Icon,\r\n  IconButton,\r\n  Divider,\r\n} from \"@chakra-ui/react\";\r\nimport { DatePicker, Layout } from \"main/components\";\r\nimport { api } from \"main/configs/axios.config\";\r\nimport { ShiftDTO } from \"main/models\";\r\nimport moment from \"moment\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport { BsCircleFill } from \"react-icons/bs\";\r\ntype ShiftDetailsProps = {\r\n  shift: ShiftDTO;\r\n};\r\nconst ShiftDetails = (props: ShiftDetailsProps) => {\r\n  const { shift } = props;\r\n  return (\r\n    <Box bg='#fff' borderRadius='lg' maxWidth='330px' mx='auto'>\r\n      <Box p={5}>\r\n        <Flex flexDir='row' gap={5}>\r\n          <Box>\r\n            <Text variant='muted'>\r\n              {`${moment(shift.requested_time).format(\"MMM D\")}`}\r\n            </Text>\r\n            <Text variant='muted'>\r\n              {`${moment(shift.requested_time).format(\"HH:mm\")}`}\r\n            </Text>\r\n          </Box>\r\n          <SimpleGrid columns={1}>\r\n            <IconButton\r\n              size='sm'\r\n              aria-label='progress'\r\n              borderRadius='full'\r\n              variant='outline'\r\n              colorScheme='green'\r\n            >\r\n              <Icon as={BsCircleFill} />\r\n            </IconButton>\r\n            <Divider\r\n              orientation='vertical'\r\n              size='sm'\r\n              borderColor={\r\n                shift.booked_time\r\n                  ? \"green\"\r\n                  : shift.shift_cancelled || shift.shift_reported\r\n                    ? \"red\"\r\n                    : \"\"\r\n              }\r\n              borderStyle={\r\n                (shift.shift_cancelled || shift.shift_reported) &&\r\n                  !shift.booked_time\r\n                  ? \"dashed\"\r\n                  : \"solid\"\r\n              }\r\n              mx='auto'\r\n              height={10}\r\n            />\r\n          </SimpleGrid>\r\n          <Text fontWeight='bold'>Client Requests Shift</Text>\r\n        </Flex>\r\n        {shift.booked_time ? (\r\n          <Flex flexDir='row' gap={5}>\r\n            <Box>\r\n              <Text variant='muted'>\r\n                {`${moment(shift.booked_time).format(\"MMM D\")}`}\r\n              </Text>\r\n              <Text variant='muted'>\r\n                {`${moment(shift.booked_time).format(\"HH:mm\")}`}\r\n              </Text>\r\n            </Box>\r\n            <SimpleGrid columns={1}>\r\n              <IconButton\r\n                size='sm'\r\n                aria-label='progress'\r\n                borderRadius='full'\r\n                variant='outline'\r\n                colorScheme='green'\r\n              >\r\n                <Icon as={BsCircleFill} />\r\n              </IconButton>\r\n              {shift.clockin_time ||\r\n                shift.clockout_time ||\r\n                shift.shift_cancelled ||\r\n                shift.shift_reported ? (\r\n                <Divider\r\n                  orientation='vertical'\r\n                  size='sm'\r\n                  borderColor={\r\n                    shift.clockin_time\r\n                      ? \"green\"\r\n                      : shift.shift_cancelled || shift.shift_reported\r\n                        ? \"red\"\r\n                        : \"\"\r\n                  }\r\n                  borderStyle={\r\n                    (shift.shift_cancelled || shift.shift_reported) &&\r\n                      !shift.clockin_time\r\n                      ? \"dashed\"\r\n                      : \"solid\"\r\n                  }\r\n                  mx='auto'\r\n                  height={10}\r\n                />\r\n              ) : (\r\n                <></>\r\n              )}\r\n            </SimpleGrid>\r\n            <Text fontWeight='bold'>Shift Booked</Text>\r\n          </Flex>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {shift.clockin_time ? (\r\n          <Flex flexDir='row' gap={5}>\r\n            <Box>\r\n              <Text variant='muted'>\r\n                {`${moment(shift.clockin_time).format(\"MMM D\")}`}\r\n              </Text>\r\n              <Text variant='muted'>\r\n                {`${moment(shift.clockin_time).format(\"HH:mm\")}`}\r\n              </Text>\r\n            </Box>\r\n            <SimpleGrid columns={1}>\r\n              <IconButton\r\n                size='sm'\r\n                aria-label='progress'\r\n                borderRadius='full'\r\n                variant='outline'\r\n                colorScheme='green'\r\n              >\r\n                <Icon as={BsCircleFill} />\r\n              </IconButton>\r\n              <Divider\r\n                orientation='vertical'\r\n                size='sm'\r\n                borderColor='green'\r\n                borderStyle='dashed'\r\n                mx='auto'\r\n                height={10}\r\n              />\r\n            </SimpleGrid>\r\n            <Text fontWeight='bold'>Clocked in</Text>\r\n          </Flex>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {shift.clockout_time ? (\r\n          <Flex flexDir='row' gap={5}>\r\n            <Box>\r\n              <Text variant='muted'>\r\n                {`${moment(shift.clockout_time).format(\"MMM D\")}`}\r\n              </Text>\r\n              <Text variant='muted'>\r\n                {`${moment(shift.clockout_time).format(\"HH:mm\")}`}\r\n              </Text>\r\n            </Box>\r\n            <SimpleGrid columns={1}>\r\n              <IconButton\r\n                size='sm'\r\n                aria-label='progress'\r\n                borderRadius='full'\r\n                variant='outline'\r\n                colorScheme='green'\r\n              >\r\n                <Icon as={BsCircleFill} />\r\n              </IconButton>\r\n\r\n            </SimpleGrid>\r\n            <Text fontWeight='bold'>Clocked out</Text>\r\n          </Flex>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {shift.shift_cancelled ? (\r\n          <Flex flexDir='row' gap={5}>\r\n            <Box>\r\n              <Text variant='muted'>\r\n                {`${moment(shift.canceled_time).format(\"MMM D\")}`}\r\n              </Text>\r\n              <Text variant='muted'>\r\n                {`${moment(shift.canceled_time).format(\"HH:mm\")}`}\r\n              </Text>\r\n            </Box>\r\n            <SimpleGrid columns={1}>\r\n              <IconButton\r\n                size='sm'\r\n                aria-label='progress'\r\n                borderRadius='full'\r\n                variant='outline'\r\n                colorScheme='red'\r\n              >\r\n                <Icon as={BsCircleFill} />\r\n              </IconButton>\r\n            </SimpleGrid>\r\n            <Text fontWeight='bold'>Shift Canceled</Text>\r\n          </Flex>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {shift.shift_reported ? (\r\n          <Flex flexDir='row' gap={5}>\r\n            <Box>\r\n              <Text variant='muted'>\r\n                {`${moment(shift.reported_time).format(\"MMM D\")}`}\r\n              </Text>\r\n              <Text variant='muted'>\r\n                {`${moment(shift.reported_time).format(\"HH:mm\")}`}\r\n              </Text>\r\n            </Box>\r\n            <SimpleGrid columns={1}>\r\n              <IconButton\r\n                size='sm'\r\n                aria-label='progress'\r\n                borderRadius='full'\r\n                variant='outline'\r\n                colorScheme='red'\r\n              >\r\n                <Icon as={BsCircleFill} />\r\n              </IconButton>\r\n            </SimpleGrid>\r\n            <Text fontWeight='bold'>Shift Reported</Text>\r\n          </Flex>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\nexport default ShiftDetails;\r\n","import {\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogCloseButton,\r\n  AlertDialogContent,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogOverlay,\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Flex,\r\n  HStack,\r\n  Heading,\r\n  Icon,\r\n  IconButton,\r\n  Image,\r\n  Modal,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  SimpleGrid,\r\n  Text,\r\n  VStack,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport { MdBusinessCenter } from \"react-icons/md\";\r\nimport { BsGrid1X2Fill, BsClock } from \"react-icons/bs\";\r\nimport { ShiftDTO } from \"main/models\";\r\nimport moment from \"moment\";\r\nimport { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport CompletedShiftCard from \"./completed\";\r\nimport ShiftDetails from \"./shift-details\";\r\nimport { DocumentDTO } from \"main/models/ShiftDTO\";\r\nimport { api } from \"main/configs/axios.config\";\r\nimport { IoMdArrowBack } from \"react-icons/io\";\r\ntype HiredShiftCardProps = {\r\n  shift: ShiftDTO;\r\n  onCancelShift?: (id: number) => void;\r\n};\r\n\r\nconst HiredShiftCard = (props: HiredShiftCardProps) => {\r\n  const { shift, onCancelShift } = props;\r\n  const {\r\n    id,\r\n    clockin_time,\r\n    role,\r\n    invoice_rate,\r\n    floor,\r\n    start_time,\r\n    end_time,\r\n    staff,\r\n    hours,\r\n    shift_status,\r\n    finished_price,\r\n    booked_time,\r\n    clockout_time,\r\n  } = shift;\r\n  const [documents, setDocuments] = useState<Record<string, DocumentDTO>>();\r\n  const [selectedDocument, setSelectedDocument] = useState<DocumentDTO>();\r\n  const getShiftDetails = useCallback(async () => {\r\n    if (shift) {\r\n      const data: ShiftDTO = await api.get(\r\n        `facilities/shifts/retrieve/${shift.id}`,\r\n        {\r\n          params: {\r\n            time_zone: moment().local().format(\"Z\").toString(),\r\n          },\r\n        }\r\n      );\r\n      data && setDocuments(data.documents);\r\n    }\r\n  }, [shift]);\r\n  useEffect(() => {\r\n    getShiftDetails();\r\n  }, [getShiftDetails]);\r\n\r\n  const { isOpen, onClose, onOpen } = useDisclosure();\r\n  const cancelRef = useRef<any>(null);\r\n  const openShiftDetail = () => { };\r\n  return (\r\n    <Box maxWidth={400} mx='auto' my={5} minW={350}>\r\n      <Card bg='#fff' p={8} boxShadow='md' border={2}>\r\n        <CardHeader\r\n          p={0}\r\n          sx={{ \"&:hover\": { cursor: \"pointer\" } }}\r\n          onClick={onOpen}\r\n        >\r\n          <VStack alignItems='start'>\r\n            <HStack justifyContent='space-between' width='100%' gap={3}>\r\n              <Heading textTransform='capitalize' size='sm'>\r\n                {`${staff?.first_name} ${staff?.last_name}, ${staff?.role}`}\r\n              </Heading>\r\n              <Text>{`#${id}`}</Text>\r\n            </HStack>\r\n            <Text\r\n              variant='caption'\r\n              marginLeft={0}\r\n              textAlign='left'\r\n            >{`${hours} Hour${hours > 1 ? \"s\" : \"\"}`}</Text>\r\n          </VStack>\r\n        </CardHeader>\r\n        <CardBody p={0}>\r\n          <HStack justifyContent='space-between' flexWrap='wrap' my={3} gap={3}>\r\n            <Text display='flex' alignItems='center'>\r\n              <Icon\r\n                color='gray.600'\r\n                as={MdBusinessCenter}\r\n                fontSize='xl'\r\n                mr={2}\r\n              />\r\n              {`Role: ${role}`}\r\n            </Text>\r\n          </HStack>\r\n          <HStack justifyContent='space-between' flexWrap='wrap' my={3} gap={3}>\r\n            <Text display='flex' alignItems='center'>\r\n              <Icon color='gray.600' as={BsGrid1X2Fill} mr={2} />\r\n              {`Floor: ${floor}`}\r\n            </Text>\r\n            <Text\r\n              verticalAlign='middle'\r\n              textAlign={{ base: \"left\", md: \"right\" }}\r\n            >\r\n              {`Invoice rate: $${invoice_rate}`}\r\n            </Text>\r\n          </HStack>\r\n          <HStack justifyContent='space-between' flexWrap='wrap' my={3} gap={3}>\r\n            <Text>\r\n              <Icon color='gray.600' as={BsClock} mr={2} />\r\n              Start time:\r\n            </Text>\r\n            <Text\r\n              textAlign={{ base: \"left\", md: \"right\" }}\r\n              display='flex'\r\n              alignItems='center'\r\n            >\r\n              {`${moment(start_time).format(\"MM/D/YYYY hh:mm A\")}`}\r\n            </Text>\r\n          </HStack>\r\n          <HStack justifyContent='space-between' flexWrap='wrap' my={3} gap={3}>\r\n            <Text>\r\n              <Icon color='gray.600' as={BsClock} mr={2} /> End time:\r\n            </Text>\r\n            <Text\r\n              textAlign={{ base: \"left\", md: \"right\" }}\r\n              display='flex'\r\n              alignItems='center'\r\n            >\r\n              {`${moment(end_time).format(\"MM/D/YYYY hh:mm A\")}`}\r\n            </Text>\r\n          </HStack>\r\n          <HStack justifyContent='space-between' flexWrap='wrap' my={3} gap={3}>\r\n            <Text>Status:</Text>\r\n            <Text\r\n              textAlign={{ base: \"left\", md: \"right\" }}\r\n              display='flex'\r\n              alignItems='center'\r\n              color={clockin_time ? \"green\" : \"orange\"}\r\n            >\r\n              {`${shift_status}`}\r\n            </Text>\r\n          </HStack>\r\n        </CardBody>\r\n      </Card>\r\n      <Modal isOpen={isOpen} onClose={onClose} size='3xl'>\r\n        <ModalOverlay />\r\n        <ModalContent mx={{ base: 5, md: 0 }}>\r\n          <ModalHeader>\r\n            {selectedDocument ? (\r\n              <HStack justifyContent='start'>\r\n                <IconButton\r\n                  aria-label='go-back'\r\n                  icon={<Icon as={IoMdArrowBack} />}\r\n                  onClick={() => setSelectedDocument(undefined)}\r\n                  variant='ghost'\r\n                  rounded='full'\r\n                />\r\n                <Text>{selectedDocument.name}</Text>\r\n              </HStack>\r\n            ) : (\r\n              \"Hired Shift Details\"\r\n            )}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody mb={5} p={5}>\r\n            {selectedDocument ? (\r\n              <Image\r\n                src={`data:image/jpeg;base64, ${selectedDocument.document}`}\r\n                alt='Document'\r\n                width='100%'\r\n                height='100%'\r\n                objectFit='cover'\r\n              />\r\n            ) : (\r\n              <>\r\n                <SimpleGrid columns={{ base: 1, md: 2 }} gap={8} mb={8}>\r\n                  <Box maxWidth='350px' mx='auto'>\r\n                    <Heading size='md'>{`${staff?.first_name} ${staff?.last_name}`}</Heading>\r\n                    <HStack\r\n                      justifyContent='space-between'\r\n                      flexWrap='wrap'\r\n                      my={3}\r\n                      gap={3}\r\n                    >\r\n                      <Text display='flex' alignItems='center'>\r\n                        {`Invoice rate: `}\r\n                      </Text>\r\n                      <Text>{`$${invoice_rate}`}</Text>\r\n                    </HStack>\r\n                    <HStack\r\n                      justifyContent='space-between'\r\n                      flexWrap='wrap'\r\n                      my={3}\r\n                      gap={3}\r\n                    >\r\n                      <Text display='flex' alignItems='center'>\r\n                        <Icon\r\n                          color='gray.600'\r\n                          as={MdBusinessCenter}\r\n                          fontSize='xl'\r\n                          mr={2}\r\n                        />\r\n                        {`Role: `}\r\n                      </Text>\r\n                      <Text>{`${role}`}</Text>\r\n                    </HStack>\r\n                    <HStack\r\n                      justifyContent='space-between'\r\n                      flexWrap='wrap'\r\n                      my={3}\r\n                      gap={3}\r\n                    >\r\n                      <Text>Start time:</Text>\r\n                      <Text\r\n                        textAlign={{ base: \"left\", md: \"right\" }}\r\n                        display='flex'\r\n                        alignItems='center'\r\n                      >\r\n                        <Icon color='gray.600' as={BsClock} mr={2} />\r\n                        {`${moment(start_time).format(\"MM/D/YYYY hh:mm A\")}`}\r\n                      </Text>\r\n                    </HStack>\r\n                    <HStack\r\n                      justifyContent='space-between'\r\n                      flexWrap='wrap'\r\n                      my={3}\r\n                      gap={3}\r\n                    >\r\n                      <Text>End time:</Text>\r\n                      <Text\r\n                        textAlign={{ base: \"left\", md: \"right\" }}\r\n                        display='flex'\r\n                        alignItems='center'\r\n                      >\r\n                        <Icon color='gray.600' as={BsClock} mr={2} />\r\n                        {`${moment(end_time).format(\"MM/D/YYYY hh:mm A\")}`}\r\n                      </Text>\r\n                    </HStack>\r\n                    <HStack\r\n                      justifyContent='space-between'\r\n                      flexWrap='wrap'\r\n                      my={3}\r\n                      gap={3}\r\n                    >\r\n                      <Text\r\n                        verticalAlign='middle'\r\n                        textAlign={{ base: \"left\", md: \"right\" }}\r\n                      >\r\n                        {`Finished price: `}\r\n                      </Text>\r\n                      <Text>{`${finished_price\r\n                          ? `$${finished_price}`\r\n                          : \"Not available yet\"\r\n                        }`}</Text>\r\n                    </HStack>\r\n                  </Box>\r\n                  <Box>\r\n                    <ShiftDetails shift={shift} />\r\n                    <Box maxWidth='330px' mx='auto'>\r\n                      <HStack\r\n                        px={5}\r\n                        justifyContent='space-between'\r\n                        flexWrap='wrap'\r\n                        my={3}\r\n                        gap={3}\r\n                      >\r\n                        <Text>Book time:</Text>\r\n                        <Text\r\n                          textAlign={{ base: \"left\", md: \"right\" }}\r\n                          display='flex'\r\n                          alignItems='center'\r\n                        >\r\n                          {`${moment(booked_time).format(\"MM/D/YYYY hh:mm A\")}`}\r\n                        </Text>\r\n                      </HStack>\r\n                      <HStack\r\n                        px={5}\r\n                        justifyContent='space-between'\r\n                        flexWrap='wrap'\r\n                        my={3}\r\n                        gap={3}\r\n                      >\r\n                        <Text>Clockin time:</Text>\r\n                        <Text\r\n                          textAlign={{ base: \"left\", md: \"right\" }}\r\n                          display='flex'\r\n                          alignItems='center'\r\n                        >\r\n                          {`${clockin_time\r\n                              ? `${moment(clockin_time).format(\r\n                                \"MM/D/YYYY hh:mm A\"\r\n                              )}`\r\n                              : \"Not available yet\"\r\n                            }`}\r\n                        </Text>\r\n                      </HStack>\r\n                      <HStack\r\n                        px={5}\r\n                        justifyContent='space-between'\r\n                        flexWrap='wrap'\r\n                        my={3}\r\n                        gap={3}\r\n                      >\r\n                        <Text>Clockout time:</Text>\r\n                        <Text\r\n                          textAlign={{ base: \"left\", md: \"right\" }}\r\n                          display='flex'\r\n                          alignItems='center'\r\n                        >\r\n                          {`${clockout_time\r\n                              ? `${moment(clockout_time).format(\r\n                                \"MM/D/YYYY hh:mm A\"\r\n                              )}`\r\n                              : \"Not available yet\"\r\n                            }`}\r\n                        </Text>\r\n                      </HStack>\r\n                    </Box>\r\n                  </Box>\r\n                </SimpleGrid>\r\n                {documents && (\r\n                  <>\r\n                    <Heading my={5} size='md' textAlign='center'>\r\n                      Required Documents\r\n                    </Heading>\r\n                    {Object.keys(documents).map(\r\n                      (key: string, index: number) => (\r\n                        <SimpleGrid\r\n                          columns={{ base: 1, md: 3 }}\r\n                          gap={8}\r\n                          key={key}\r\n                          borderBottom={\r\n                            index < Object.keys(documents).length - 1\r\n                              ? \"1px solid lightgrey\"\r\n                              : \"\"\r\n                          }\r\n                          py={5}\r\n                          alignItems='center'\r\n                        >\r\n                          <Text textAlign='center'>{documents[key].name}</Text>\r\n                          {documents[key].document ? (\r\n                            <Image\r\n                              src={`data:image/jpeg;base64, ${documents[key].document}`}\r\n                              alt='Document'\r\n                              width={100}\r\n                              height={20}\r\n                              objectFit='cover'\r\n                              borderRadius='lg'\r\n                              mx='auto'\r\n                              boxShadow='sm'\r\n                            />\r\n                          ) : (\r\n                            <Text textAlign='center' color='GrayText'>\r\n                              No image\r\n                            </Text>\r\n                          )}\r\n                          <Box textAlign='center'>\r\n                            <Button\r\n                              px={4}\r\n                              mx='auto'\r\n                              color='gray.600'\r\n                              size='sm'\r\n                              variant='outline'\r\n                              sx={{ borderRadius: 3 }}\r\n                              rounded='full'\r\n                              onClick={() =>\r\n                                setSelectedDocument(documents[key])\r\n                              }\r\n                            >\r\n                              View\r\n                            </Button>\r\n                          </Box>\r\n                        </SimpleGrid>\r\n                      )\r\n                    )}\r\n                  </>\r\n                )}\r\n              </>\r\n            )}\r\n          </ModalBody>\r\n        </ModalContent>\r\n      </Modal>\r\n    </Box>\r\n  );\r\n};\r\nexport default HiredShiftCard;\r\n","import {\r\n    AlertDialog,\r\n    AlertDialogBody,\r\n    AlertDialogCloseButton,\r\n    AlertDialogContent,\r\n    AlertDialogFooter,\r\n    AlertDialogHeader,\r\n    Image,\r\n    Box,\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    HStack,\r\n    Heading,\r\n    Icon,\r\n    IconButton,\r\n    Modal,\r\n    ModalBody,\r\n    ModalCloseButton,\r\n    ModalContent,\r\n    ModalHeader,\r\n    ModalOverlay,\r\n    SimpleGrid,\r\n    Text,\r\n    VStack,\r\n    useDisclosure,\r\n    Center,\r\n    Flex,\r\n    Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport { MdBusinessCenter } from \"react-icons/md\";\r\nimport { BsGrid1X2Fill, BsClock } from \"react-icons/bs\";\r\nimport { ShiftDTO } from \"main/models\";\r\nimport moment from \"moment\";\r\nimport { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport { IoMdArrowBack } from \"react-icons/io\";\r\nimport ShiftDetails from \"./shift-details\";\r\nimport { api } from \"main/configs/axios.config\";\r\ntype CompletedShiftDetailsProps = {\r\n    shift: ShiftDTO;\r\n    showTimesheet: boolean; setShowTimesheet: (value: boolean) => void;\r\n};\r\nconst CompletedShiftDetails = (props: CompletedShiftDetailsProps) => {\r\n    const { shift, showTimesheet, setShowTimesheet } = props;\r\n    const {\r\n        id,\r\n        clockin_time,\r\n        role,\r\n        invoice_rate,\r\n        floor,\r\n        start_time,\r\n        end_time,\r\n        staff,\r\n        hours,\r\n        shift_status,\r\n        finished_price,\r\n        booked_time,\r\n        clockout_time\r\n    } = shift;\r\n    const [isLoading, setIsLoading] = useState<boolean>(true);\r\n    const [timesheet, setTimesheet] = useState<string>('');\r\n    const getShiftDetails = useCallback(async () => {\r\n        const shift: ShiftDTO | null = await api.get(`facilities/shifts/retrieve/${id}`, {\r\n            params:\r\n                { time_zone: moment().format(\"Z\").toString(), }\r\n        });\r\n        if (shift && shift.time_sheet) {\r\n            setTimesheet(shift.time_sheet);\r\n        }\r\n        setIsLoading(false)\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        getShiftDetails()\r\n    }, [getShiftDetails]);\r\n\r\n\r\n    return isLoading ? <Flex justifyContent='center'>\r\n        <Spinner color='red.500' />\r\n    </Flex> : showTimesheet ?\r\n        (timesheet ? <Flex minH={\"80vh\"} w='100%' justifyContent='center' rounded='md' alignItems='center' bg='#fff' px={{ base: 5, md: 10 }} flexDir='column'>\r\n            <iframe id=\"contract\" style={{ width: '100%', height: '60vh' }} src={`data:application/pdf;base64,${timesheet}`}></iframe>\r\n        </Flex> : <Text>Not available</Text>)\r\n        :\r\n        <>\r\n            <SimpleGrid columns={{ base: 1, md: 2 }} gap={8} mb={8}>\r\n                <Box maxWidth='350px' mx='auto'>\r\n                    <Heading size='md'>{`${staff?.first_name} ${staff?.last_name}`}</Heading>\r\n                    <HStack\r\n                        justifyContent='space-between'\r\n                        flexWrap='wrap'\r\n                        my={3}\r\n                        gap={3}\r\n                    >\r\n                        <Text display='flex' alignItems='center'>\r\n                            {`Invoice rate: `}\r\n                        </Text>\r\n                        <Text>{`$${invoice_rate}`}</Text>\r\n                    </HStack>\r\n                    <HStack\r\n                        justifyContent='space-between'\r\n                        flexWrap='wrap'\r\n                        my={3}\r\n                        gap={3}\r\n                    >\r\n                        <Text display='flex' alignItems='center'>\r\n                            <Icon\r\n                                color='gray.600'\r\n                                as={MdBusinessCenter}\r\n                                fontSize='xl'\r\n                                mr={2}\r\n                            />\r\n                            {`Role: `}\r\n                        </Text>\r\n                        <Text>{`${role}`}</Text>\r\n                    </HStack>\r\n                    <HStack\r\n                        justifyContent='space-between'\r\n                        flexWrap='wrap'\r\n                        my={3}\r\n                        gap={3}\r\n                    >\r\n                        <Text>Start time:</Text>\r\n                        <Text\r\n                            textAlign={{ base: \"left\", md: \"right\" }}\r\n                            display='flex'\r\n                            alignItems='center'\r\n                        >\r\n                            <Icon color='gray.600' as={BsClock} mr={2} />\r\n                            {`${moment(start_time).format(\"MM/D/YYYY hh:mm A\")}`}\r\n                        </Text>\r\n                    </HStack>\r\n                    <HStack\r\n                        justifyContent='space-between'\r\n                        flexWrap='wrap'\r\n                        my={3}\r\n                        gap={3}\r\n                    >\r\n                        <Text>End time:</Text>\r\n                        <Text\r\n                            textAlign={{ base: \"left\", md: \"right\" }}\r\n                            display='flex'\r\n                            alignItems='center'\r\n                        >\r\n                            <Icon color='gray.600' as={BsClock} mr={2} />\r\n                            {`${moment(end_time).format(\"MM/D/YYYY hh:mm A\")}`}\r\n                        </Text>\r\n                    </HStack>\r\n                    <HStack\r\n                        justifyContent='space-between'\r\n                        flexWrap='wrap'\r\n                        my={3}\r\n                        gap={3}\r\n                    >\r\n                        <Text\r\n                            verticalAlign='middle'\r\n                            textAlign={{ base: \"left\", md: \"right\" }}\r\n                        >\r\n                            {`Finished price: `}\r\n                        </Text>\r\n                        <Text>{`${finished_price\r\n                            ? `$${finished_price}`\r\n                            : \"Not available yet\"\r\n                            }`}</Text>\r\n                    </HStack>\r\n                </Box>\r\n                <Box>\r\n                    <ShiftDetails shift={shift} />\r\n                    <Box maxWidth='330px' mx='auto'>\r\n                        <HStack\r\n                            px={5}\r\n                            justifyContent='space-between'\r\n                            flexWrap='wrap'\r\n                            my={3}\r\n                            gap={3}\r\n                        >\r\n                            <Text>Book time:</Text>\r\n                            <Text\r\n                                textAlign={{ base: \"left\", md: \"right\" }}\r\n                                display='flex'\r\n                                alignItems='center'\r\n                            >\r\n                                {`${moment(booked_time).format(\"MM/D/YYYY hh:mm A\")}`}\r\n                            </Text>\r\n                        </HStack>\r\n                        <HStack\r\n                            px={5}\r\n                            justifyContent='space-between'\r\n                            flexWrap='wrap'\r\n                            my={3}\r\n                            gap={3}\r\n                        >\r\n                            <Text>Clockin time:</Text>\r\n                            <Text\r\n                                textAlign={{ base: \"left\", md: \"right\" }}\r\n                                display='flex'\r\n                                alignItems='center'\r\n                            >\r\n                                {`${clockin_time\r\n                                    ? `${moment(clockin_time).format(\r\n                                        \"MM/D/YYYY hh:mm A\"\r\n                                    )}`\r\n                                    : \"Not available yet\"\r\n                                    }`}\r\n                            </Text>\r\n                        </HStack>\r\n                        <HStack\r\n                            px={5}\r\n                            justifyContent='space-between'\r\n                            flexWrap='wrap'\r\n                            my={3}\r\n                            gap={3}\r\n                        >\r\n                            <Text>Clockout time:</Text>\r\n                            <Text\r\n                                textAlign={{ base: \"left\", md: \"right\" }}\r\n                                display='flex'\r\n                                alignItems='center'\r\n                            >\r\n                                {`${clockout_time\r\n                                    ? `${moment(clockout_time).format(\r\n                                        \"MM/D/YYYY hh:mm A\"\r\n                                    )}`\r\n                                    : \"Not available yet\"\r\n                                    }`}\r\n                            </Text>\r\n                        </HStack>\r\n                    </Box>\r\n                </Box>\r\n            </SimpleGrid>\r\n            <Center> <Button\r\n                px={8}\r\n                color='gray.600'\r\n                size='sm'\r\n                mx='auto'\r\n                variant='outline'\r\n                sx={{ borderRadius: 3 }}\r\n                rounded='full'\r\n                mt={3}\r\n                onClick={() => setShowTimesheet(true)}\r\n            >Show timesheet</Button></Center>\r\n        </>\r\n\r\n\r\n};\r\nexport default CompletedShiftDetails;\r\n","import {\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogCloseButton,\r\n  AlertDialogContent,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  Image,\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  HStack,\r\n  Heading,\r\n  Icon,\r\n  IconButton,\r\n  Modal,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  SimpleGrid,\r\n  Text,\r\n  VStack,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport { MdBusinessCenter } from \"react-icons/md\";\r\nimport { BsGrid1X2Fill, BsClock } from \"react-icons/bs\";\r\nimport { ShiftDTO } from \"main/models\";\r\nimport moment from \"moment\";\r\nimport { useRef, useState } from \"react\";\r\nimport { IoMdArrowBack } from \"react-icons/io\";\r\nimport ShiftDetails from \"./shift-details\";\r\nimport CompletedShiftDetails from \"./completed-shift-details\";\r\ntype CompletedShiftCardProps = {\r\n  shift: ShiftDTO;\r\n  onCancelShift?: (id: number) => void;\r\n};\r\n\r\nconst CompletedShiftCard = (props: CompletedShiftCardProps) => {\r\n  const { shift, onCancelShift } = props;\r\n  const {\r\n    id,\r\n    clockin_time,\r\n    role,\r\n    invoice_rate,\r\n    floor,\r\n    start_time,\r\n    end_time,\r\n    staff,\r\n    hours,\r\n    shift_status,\r\n    finished_price,\r\n    booked_time,\r\n    clockout_time, worked_minutes\r\n  } = shift;\r\n  const { isOpen, onClose, onOpen } = useDisclosure();\r\n  const [showTimesheet, setShowTimesheet] = useState<boolean>(false)\r\n  const cancelRef = useRef<any>(null);\r\n  return (\r\n    <Box maxWidth={400} mx='auto' my={5} minWidth={{ base: \"100%\", md: 350 }}>\r\n      <Card bg='#fff' p={8} boxShadow='md' border={2} variant='elevated'>\r\n        <CardHeader p={0} onClick={onOpen} _hover={{ cursor: 'pointer' }}>\r\n          <VStack alignItems='start'>\r\n            <Heading fontSize='xl'>{`Shift #${id}`}</Heading>\r\n            <Text\r\n              fontSize='xl'\r\n              textTransform='capitalize'\r\n            >{`${staff?.first_name} ${staff?.last_name}`}</Text>\r\n          </VStack>\r\n        </CardHeader>\r\n        <CardBody p={0}>\r\n          <HStack justifyContent='space-between' flexWrap='wrap' my={3} gap={3}>\r\n            <Text display='flex' alignItems='center'>\r\n              <Icon\r\n                color='gray.600'\r\n                as={MdBusinessCenter}\r\n                fontSize='xl'\r\n                mr={2}\r\n              />\r\n              {`Role: `}\r\n            </Text>\r\n            <Text>{`${role}`}</Text>\r\n          </HStack>\r\n          <HStack justifyContent='space-between' flexWrap='wrap' my={3} gap={3}>\r\n            <Text>Start time:</Text>\r\n            <Text\r\n              textAlign={{ base: \"left\", md: \"right\" }}\r\n              display='flex'\r\n              alignItems='center'\r\n            >\r\n              <Icon color='gray.600' as={BsClock} mr={2} />\r\n              {`${moment(start_time).format(\"MM/D/YYYY hh:mm A\")}`}\r\n            </Text>\r\n          </HStack>\r\n          <HStack justifyContent='space-between' flexWrap='wrap' my={3} gap={3}>\r\n            <Text>End time:</Text>\r\n            <Text\r\n              textAlign={{ base: \"left\", md: \"right\" }}\r\n              display='flex'\r\n              alignItems='center'\r\n            >\r\n              <Icon color='gray.600' as={BsClock} mr={2} />\r\n              {`${moment(end_time).format(\"MM/D/YYYY hh:mm A\")}`}\r\n            </Text>\r\n          </HStack>\r\n          <HStack justifyContent='space-between' flexWrap='wrap' my={3} gap={3}>\r\n            <Text\r\n              verticalAlign='middle'\r\n              textAlign={{ base: \"left\", md: \"right\" }}\r\n            >\r\n              {`Hours: ${hours}`}\r\n            </Text>\r\n            <Text>{`Worked: ${parseInt((worked_minutes / 60).toString())}h ${worked_minutes % 60\r\n              }m`}</Text>\r\n          </HStack>\r\n          <HStack justifyContent='space-between' flexWrap='wrap' my={3} gap={3}>\r\n            <Text\r\n              verticalAlign='middle'\r\n              textAlign={{ base: \"left\", md: \"right\" }}\r\n            >\r\n              {`Invoice rate: $${invoice_rate}`}\r\n            </Text>\r\n            <Text>{`Finished Price: $${finished_price}`}</Text>\r\n          </HStack>\r\n          <HStack justifyContent='space-between' flexWrap='wrap' my={3} gap={3}>\r\n            <Text display='flex' alignItems='center'>\r\n              {`Payment Status: `}\r\n            </Text>\r\n            <Text fontWeight='bold'>{`${shift_status}`}</Text>\r\n          </HStack>\r\n        </CardBody>\r\n      </Card>\r\n      <Modal isOpen={isOpen} onClose={onClose} size='3xl'>\r\n        <ModalOverlay />\r\n        <ModalContent mx={{ base: 5, md: 0 }}>\r\n          <ModalHeader>\r\n            {showTimesheet ? (\r\n              <HStack justifyContent='start'>\r\n                <IconButton\r\n                  aria-label='go-back'\r\n                  icon={<Icon as={IoMdArrowBack} />}\r\n                  onClick={() => setShowTimesheet(false)}\r\n                  variant='ghost'\r\n                  rounded='full'\r\n                />\r\n                <Heading size='md'>Timesheet</Heading>\r\n              </HStack>\r\n            ) : (\r\n              \"Shift Details\"\r\n            )}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody mb={5} p={5}>\r\n            <CompletedShiftDetails shift={shift} showTimesheet={showTimesheet} setShowTimesheet={setShowTimesheet} />\r\n          </ModalBody>\r\n        </ModalContent>\r\n      </Modal>\r\n    </Box>\r\n  );\r\n};\r\nexport default CompletedShiftCard;\r\n","import styled from \"@emotion/styled\";\r\nimport {\r\n  Tabs,\r\n  TabList,\r\n  TabPanels,\r\n  Tab,\r\n  TabPanel,\r\n  Card,\r\n  CardBody,\r\n  Text,\r\n  Box,\r\n  Flex,\r\n  Alert,\r\n  AlertIcon,\r\n  Spinner,\r\n  Heading,\r\n} from \"@chakra-ui/react\";\r\nimport { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport moment from \"moment\";\r\nimport ChakraCarousel from \"main/components/carousel\";\r\nimport { api } from \"main/configs/axios.config\";\r\nimport OpenShiftCard from \"main/views/shifts/open-shifts\";\r\nimport { ShiftDTO } from \"main/models\";\r\nimport { toast } from \"react-toastify\";\r\nimport HiredShiftCard from \"main/views/shifts/hired-shift\";\r\nimport CompletedShiftCard from \"main/views/shifts/completed\";\r\nimport { useLocation } from \"react-router-dom\";\r\nconst StyledTab = styled(Tab)((props) => ({\r\n  \"&[aria-selected=true]\": {\r\n    backgroundColor: \"#E3022A\",\r\n    color: \"#fff\",\r\n  },\r\n}));\r\n\r\nconst Shifts = () => {\r\n  const [selectedDate, setSelectedDate] = useState<Date>(new Date());\r\n  const location = useLocation()\r\n  const [tabIndex, setTabIndex] = useState<number>(location?.state?.shiftTab ? location.state.shiftTab : 0);\r\n  const [openShifts, setOpenShifts] = useState<ShiftDTO[]>();\r\n  const [hiredShifts, setHiredShifts] = useState<ShiftDTO[]>();\r\n  const [completedShifts, setCompletedShifts] = useState<ShiftDTO[]>();\r\n  const [shiftsLoading, setShiftsLoading] = useState<boolean>(true);\r\n\r\n  const getShifts = useCallback(async () => {\r\n    const url: string = `facilities/shifts/${tabIndex === 0 ? \"opened\" : tabIndex === 1 ? \"hired\" : \"timesheet\"\r\n      }`;\r\n    const result: ShiftDTO[] = await api.get(url, {\r\n      params: {\r\n        date: moment(selectedDate).format(\"YYYY-MM-DD\"),\r\n        time_zone: moment().local().format(\"Z\"),\r\n      },\r\n    });\r\n    tabIndex === 0\r\n      ? setOpenShifts(result)\r\n      : tabIndex === 1\r\n        ? setHiredShifts(result)\r\n        : setCompletedShifts(result);\r\n    setShiftsLoading(false);\r\n  }, [selectedDate, tabIndex]);\r\n\r\n  useEffect(() => {\r\n    getShifts();\r\n  }, [selectedDate]);\r\n\r\n  const getDates = () => {\r\n    const dates = new Array();\r\n    const now = new Date();\r\n    if (tabIndex === 2) {\r\n      for (\r\n        let i = new Date(now.getFullYear(), now.getMonth(), 1).getDate();\r\n        i <= new Date(now.getFullYear(), now.getMonth() + 1, 0).getDate();\r\n        i++\r\n      ) {\r\n        const date = new Date(now.getFullYear(), now.getMonth(), i);\r\n        dates.push({\r\n          date: date.getDate(),\r\n          day: date.toString().split(\" \")[0],\r\n        });\r\n      }\r\n    } else {\r\n      for (\r\n        let i = now.getDate() - 1;\r\n        i <= new Date(now.getFullYear(), now.getMonth() + 1, 0).getDate();\r\n        i++\r\n      ) {\r\n        const date = new Date(now.getFullYear(), now.getMonth(), i);\r\n        dates.push({\r\n          date: date.getDate(),\r\n          day: date.toString().split(\" \")[0],\r\n        });\r\n      }\r\n    }\r\n    return dates;\r\n  };\r\n  const handleCancelShift = async (shiftId: number) => {\r\n    const result = await api.post(\r\n      \"facilities/shifts/cancel\",\r\n      {},\r\n      { params: { shift_id: shiftId } }\r\n    );\r\n    if (result) {\r\n      toast.success(`Shift #${shiftId}  canceled successfully.`);\r\n      getShifts();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='App'>\r\n      <Tabs\r\n        variant='soft-rounded'\r\n        colorScheme='red'\r\n        align='center'\r\n        onChange={(index: number) => {\r\n          setTabIndex(index);\r\n          setSelectedDate(new Date());\r\n        }}\r\n        index={tabIndex}\r\n      >\r\n\r\n        <TabList\r\n          sx={{ border: \"1px solid lightgray\", width: \"fit-content\" }}\r\n          rounded='3xl'\r\n        >\r\n          <StyledTab px={{ base: 5, md: 10, lg: 20 }} py={2}>\r\n            Open\r\n          </StyledTab>\r\n          <StyledTab px={{ base: 5, md: 10, lg: 20 }} py={2}>\r\n            Hired\r\n          </StyledTab>\r\n          <StyledTab px={{ base: 5, md: 10, lg: 20 }} py={2}>\r\n            Completed\r\n          </StyledTab>\r\n        </TabList>\r\n        <Box p={{ base: 3, md: 8 }}>\r\n          <ChakraCarousel\r\n            gap={5}\r\n            sliderItemWidth={40}\r\n            rounded='lg'\r\n            mt={8}\r\n            boxShadow='md'\r\n            bg='#fff'\r\n            p={3}\r\n            px='3rem'\r\n          >\r\n            {getDates()?.map((d: any, index: any) => {\r\n              return (\r\n                <Box\r\n                  key={`${tabIndex}-${d.day}-${d.date}`}\r\n                  px={5}\r\n                  py={3}\r\n                  mx={3}\r\n                  w={\"40px\"}\r\n                  bg={selectedDate?.getDate() === d.date ? \"#E3022A\" : \"\"}\r\n                  color={selectedDate?.getDate() === d.date ? \"#fff\" : \"\"}\r\n                  rounded={8}\r\n                  onClick={() => {\r\n                    setSelectedDate(\r\n                      new Date(moment(`${d.date}`, [\"D\"]).toString())\r\n                    );\r\n                    setShiftsLoading(true);\r\n                  }}\r\n                  cursor='pointer'\r\n                >\r\n                  <Heading size='sm' color='inherit'>\r\n                    {d.date}\r\n                  </Heading>\r\n                  <Text\r\n                    color={selectedDate?.getDate() === d.date ? \"#fff\" : \"gray\"}\r\n                  >\r\n                    {d.day}\r\n                  </Text>\r\n                </Box>\r\n              );\r\n            })}\r\n          </ChakraCarousel>\r\n          <TabPanels mt={5}>\r\n            <TabPanel>\r\n              {shiftsLoading && (\r\n                <Flex justifyContent='center' alignItems='center'>\r\n                  <Spinner color='#E3022A' />\r\n                </Flex>\r\n              )}\r\n              {!shiftsLoading && openShifts?.length === 0 && (\r\n                <Alert status='warning' w={\"100%\"} rounded={5}>\r\n                  <AlertIcon />\r\n                  No shifts found.\r\n                </Alert>\r\n              )}\r\n              <Flex\r\n                flexDir='row'\r\n                justifyContent='start'\r\n                alignItems='center'\r\n                flexWrap='wrap'\r\n                gap={4}\r\n              >\r\n                {!shiftsLoading &&\r\n                  openShifts?.map((shift: ShiftDTO) => (\r\n                    <OpenShiftCard\r\n                      shift={shift}\r\n                      key={shift.id}\r\n                      onCancelShift={handleCancelShift}\r\n                    />\r\n                  ))}\r\n              </Flex>\r\n            </TabPanel>\r\n            <TabPanel>\r\n              {shiftsLoading && (\r\n                <Flex justifyContent='center' alignItems='center'>\r\n                  <Spinner color='#E3022A' />\r\n                </Flex>\r\n              )}\r\n              {!shiftsLoading && hiredShifts?.length === 0 && (\r\n                <Alert status='warning' w={\"100%\"} rounded={5}>\r\n                  <AlertIcon />\r\n                  No shifts found.\r\n                </Alert>\r\n              )}\r\n              {!shiftsLoading &&\r\n                hiredShifts?.map((shift: ShiftDTO) => (\r\n                  <HiredShiftCard shift={shift} key={shift.id} />\r\n                ))}\r\n            </TabPanel>\r\n            <TabPanel>\r\n              {shiftsLoading && (\r\n                <Flex justifyContent='center' alignItems='center'>\r\n                  <Spinner color='#E3022A' />\r\n                </Flex>\r\n              )}\r\n              {!shiftsLoading && completedShifts?.length === 0 && (\r\n                <Alert status='warning' w={\"100%\"} rounded={5}>\r\n                  <AlertIcon />\r\n                  No shifts found.\r\n                </Alert>\r\n              )}\r\n              {!shiftsLoading &&\r\n                completedShifts?.map((shift: ShiftDTO) => (\r\n                  <CompletedShiftCard shift={shift} key={shift.id} />\r\n                ))}\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Box>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};\r\nexport default Shifts;\r\n","import { Layout } from \"main/components\";\r\nimport { useEffect, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  FormControl,\r\n  FormErrorMessage,\r\n  FormLabel,\r\n  HStack,\r\n  Heading,\r\n  Input,\r\n  InputGroup,\r\n  InputRightElement,\r\n  SimpleGrid,\r\n  Text,\r\n  VStack,\r\n} from \"@chakra-ui/react\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { Message } from \"./types\";\r\nimport moment from \"moment\";\r\nimport { useAuth } from \"main/hooks\";\r\n\r\nconst settings = {\r\n  path: `/message`,\r\n  transports: [\"0\", \"1\"],\r\n  auth: { token: localStorage.getItem(\"access_token\") },\r\n  query: {\r\n    token: localStorage.getItem(\"access_token\"),\r\n  },\r\n  rejectUnauthorized: false,\r\n  timeout: 20000,\r\n  reconnection: false,\r\n  reconnectionAttempts: 3,\r\n  reconnectionDelay: 1000,\r\n  reconnectionDelayMax: 5000,\r\n};\r\n\r\ntype ChatProps = {\r\n  messages?: Message[];\r\n  shiftId?: number;\r\n  staff: any;\r\n  socket: any;\r\n};\r\nconst Chat = (props: ChatProps) => {\r\n  const { messages, shiftId, staff, socket } = props;\r\n\r\n  const [currentMessages, setCurrentMessages] = useState(messages);\r\n  const [lastMessage, setLastMessage] = useState<string>(\r\n    messages && messages[0]?.message_date ? messages && messages[0]?.message_date : ''\r\n  );\r\n  const {\r\n    handleSubmit,\r\n    control,\r\n    formState: { errors },\r\n    setError,\r\n  } = useForm();\r\n  const { user } = useAuth();\r\n  useEffect(() => {\r\n    if (socket) {\r\n      console.log('socket', socket);\r\n      socket.io.connect();\r\n      socket.io.on(\"disconnect\", () => {\r\n        console.log(\"disconnect\");\r\n      });\r\n      socket.io.on(\"connect\", () => {\r\n        console.log(\"socket connected\");\r\n      });\r\n      socket.on(\"new_message\", (msg: string) => {\r\n        console.log(msg);\r\n        // JSON.parse(msg).receiver_phone === phone &&\r\n        //   renderSenderMessage(JSON.parse(msg));\r\n        // JSON.parse(msg).sender_phone === sender &&\r\n        //   renderReceiverMessage(JSON.parse(msg));\r\n        // updateSelectedChat(\r\n        //   JSON.parse(msg),\r\n        //   JSON.parse(msg).sender_phone === sender\r\n        //     ? JSON.parse(msg).sender_phone\r\n        //     : JSON.parse(msg).receiver_phone\r\n        // );\r\n      });\r\n      // return () => {\r\n      //   socket.off(\"connect\");\r\n      //   socket.off(\"disconnect\");\r\n      // };\r\n    }\r\n  }, [socket]);\r\n\r\n  const onSubmit = (data: any) => {\r\n    socket.open();\r\n    socket.emit(\"send_message\", {\r\n      message: data.message,\r\n      receiver: staff?.phone,\r\n      shift_id: shiftId,\r\n    });\r\n  };\r\n  return (\r\n    <Box position='relative' height={\"100%\"} px={5} >\r\n\r\n      <Heading\r\n        as='h5'\r\n        size='md'\r\n        mb={5}\r\n        borderBottom='1px solid lightgray'\r\n        pb={5}\r\n      >\r\n        {`${staff?.first_name} ${staff?.last_name}`}\r\n      </Heading>\r\n      <Box overflowY='auto' height='70vh' >\r\n        {messages?.map((item: Message) => moment(item.message_date).format(\"D MMM YYYY\")).filter((item, i, ar) => ar.indexOf(item) === i).map((msg_date: string) => {\r\n          return (\r\n            <Flex flexDir='column' key={msg_date}>\r\n              {<Text textAlign='center'>{moment(msg_date).isSame(moment(), \"day\") ? 'Today' : moment(msg_date).format(\"D MMM YYYY\")}</Text>}\r\n              {messages.filter((msg: Message) => moment(msg.message_date).format(\"D MMM YYYY\") === msg_date).map((msg: Message) => (\r\n                <Flex flexDir='row' alignItems='center' justifyContent={msg.sender_phone === user.phone ? 'end' : 'start'} gap={2} key={msg.id}>\r\n                  <Text\r\n                    key={msg.id}\r\n                    border='1px solid lightgray'\r\n                    px={3}\r\n                    py={2}\r\n                    width='fit-content'\r\n                    my={3}\r\n                    borderRadius='lg'\r\n                  >\r\n                    {msg.message}\r\n\r\n                  </Text>\r\n                  <Text fontSize='sm' color='GrayText'>{moment(msg.message_date).format(\"hh:mm A\")}</Text></Flex>\r\n              ))}\r\n\r\n            </Flex>\r\n          )\r\n        })}</Box>\r\n\r\n      <Box position='static' mt={5} backgroundColor='#fff'>\r\n        <form onSubmit={(e) => e.preventDefault()} style={{ width: \"100%\" }}>\r\n          <SimpleGrid spacing={5} gridTemplateColumns='3fr 1fr' width='100%'>\r\n            <Controller\r\n              control={control}\r\n              name='message'\r\n              rules={{\r\n                required: \"Field is required.\",\r\n              }}\r\n              render={({\r\n                field: { onChange, value = \"\" },\r\n                fieldState: { error },\r\n              }) => <Input type='text' value={value} onChange={onChange} />}\r\n            />\r\n            <Button\r\n              backgroundColor='#E3022A'\r\n              color={\"#fff\"}\r\n              variant='solid'\r\n              onClick={handleSubmit(onSubmit)}\r\n              sx={{ \"&:hover\": { backgroundColor: \"#CC0024\" } }}\r\n            >\r\n              Send\r\n            </Button>\r\n          </SimpleGrid>\r\n        </form>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\nexport default Chat;\r\n","import {\r\n  Alert,\r\n  AlertIcon,\r\n  Box,\r\n  Card,\r\n  Flex,\r\n  HStack,\r\n  Heading,\r\n  IconButton,\r\n  SimpleGrid,\r\n  Tag,\r\n  Text,\r\n  VStack,\r\n} from \"@chakra-ui/react\";\r\nimport { api } from \"main/configs/axios.config\";\r\nimport Chat from \"main/views/messages/chat\";\r\nimport { ChatType, Message } from \"main/views/messages/types\";\r\nimport moment from \"moment\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nconst io = require(\"socket.io-client\");\r\nconst settings = {\r\n  \"url\": 'https://api.nursebillboard.com',\r\n  \"path\": \"/message\",\r\n  \"transports\": ['websocket', 'polling'],\r\n  \"port\": 8000,\r\n  \"transportOptions\": {\r\n    \"polling\": {\r\n      \"extraHeaders\": {\r\n        \"Access-Control-Allow-Origin\": \"https://nursebillboard.com\"\r\n      }\r\n    }\r\n  },\r\n  \"query\": {\r\n    \"token\": localStorage.getItem(\"access_token\") ? JSON.parse(localStorage.getItem(\"access_token\")?.toString() || \"\") : \"\"\r\n  },\r\n  \"hostname\": 'https://api.nursebillboard.com',\r\n  \"withCredentials\": true,\r\n  \"rejectUnauthorized\": true,\r\n  \"timeout\": 20000,\r\n  \"reconnection\": true,\r\n  \"reconnectionAttempts\": 3,\r\n  \"reconnectionDelay\": 1000,\r\n  \"reconnectionDelayMax\": 5000,\r\n  \"cors\": {\r\n    origin: \"https://nursebillboard.com\"\r\n  },\r\n  \"secure\": true,\r\n  \"headers\": {\r\n    \"Access-Control-Allow-Origin\": \"https://nursebillboard.com\"\r\n  }\r\n};\r\n\r\nconst socket = io.connect(`https://api.nursebillboard.com?token=${localStorage.getItem(\"access_token\") ? JSON.parse(localStorage.getItem(\"access_token\")?.toString() || \"\") : \"\"}`, settings);\r\nconst Messages = () => {\r\n  const [chats, setChats] = useState<ChatType[]>([]);\r\n  const [selectedChat, setSelectedChat] = useState<ChatType>(chats[0]);\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n\r\n\r\n  const getMessages = useCallback(async () => {\r\n    const data: ChatType[] = await api.get(\"facilities/messages\", {\r\n      params: {\r\n        time_zone: moment().local().format(\"Z\").toString(),\r\n      },\r\n    });\r\n    setChats(data);\r\n    setSelectedChat(data[0]);\r\n  }, []);\r\n  const getMessagesWithUser = useCallback(async () => {\r\n    if (selectedChat) {\r\n      const data: any[] = await api.get(\r\n        `facilities/messages/${selectedChat.staff?.phone}`,\r\n        {\r\n          params: {\r\n            shift_id: selectedChat.id,\r\n            time_zone: moment().local().format(\"Z\").toString(),\r\n          },\r\n        }\r\n      );\r\n      setMessages(data);\r\n    }\r\n  }, [selectedChat]);\r\n  useEffect(() => {\r\n    socket.io.connect()\r\n\r\n    socket.io.on('connect', () => {\r\n      setIsConnected(true);\r\n      console.log('connected')\r\n\r\n    });\r\n\r\n    socket.io.on('disconnect', function () {\r\n      console.log('Client disconnected.'); setIsConnected(false);\r\n    });\r\n\r\n    socket.io.on(\"connect_error\", (error: any) => {\r\n      console.log('connect_error', error?.message)\r\n      // setTimeout(() => { newSocket.connect() }, 5000)\r\n    });\r\n    console.log(socket)\r\n    return () => {\r\n      if (socket.connected) {\r\n        socket.off('connect');\r\n        socket.off('disconnect');\r\n        socket.off('pong');\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getMessages();\r\n  }, [getMessages]);\r\n\r\n  useEffect(() => {\r\n    getMessagesWithUser();\r\n  }, [getMessagesWithUser]);\r\n\r\n  return (\r\n    <Flex bg='#fff' rounded='lg' p={5} alignItems={!socket || !isConnected || !chats || chats.length === 0 ? 'center' : 'start'} flexDir={{ base: 'column', lg: 'row' }} minHeight='50vh' justifyContent='center'>\r\n\r\n\r\n      {(!chats || chats.length === 0) && isConnected && < Alert status='warning' mx='auto' borderRadius='lg'>\r\n        <AlertIcon />\r\n        No shifts available.\r\n      </Alert>}\r\n      {chats && chats.length > 0 && <Box w='40%' h='100%' my={5}>\r\n        {chats?.map((chat: ChatType, index: number) => (\r\n          <SimpleGrid\r\n            minWidth='350px'\r\n            key={chat.id}\r\n            p={3}\r\n            bg={selectedChat?.id === chat.id ? \"#E3022A\" : chat.unread_messages || chat.unread_messages > 0 ? 'red.50' : ''}\r\n            color={selectedChat?.id === chat.id ? \"#fff \" : \"\"}\r\n            py={3}\r\n            gridTemplateColumns='4fr 2fr'\r\n            rounded='lg'\r\n            my={3}\r\n            boxShadow='sm'\r\n          >\r\n            <VStack alignItems='start'><Heading color='inherit' size='md'>{`${chat.staff?.first_name} ${chat.staff?.last_name}`}</Heading>\r\n              <Text color='inherit'>{`${chat?.last_message?.message || ''}`}</Text></VStack>\r\n            <VStack alignItems='end'>\r\n              <Text color='inherit'>{`${moment(chat?.last_message?.message_date).format(\"hh:mm A\")}`}</Text>\r\n              {chat.unread_messages > 0 && <Tag variant='solid' colorScheme='red' rounded='full'>{chat.unread_messages}</Tag>}\r\n            </VStack>\r\n          </SimpleGrid>\r\n        ))}\r\n      </Box>}\r\n      {(!socket || !isConnected) && <Alert status='warning' mx={2} borderRadius='lg'>\r\n        <AlertIcon />\r\n        Chat not available.\r\n      </Alert>}\r\n      {\r\n        selectedChat && isConnected && (\r\n          <Box w='60%' h='100%'>\r\n            <Chat\r\n              messages={messages}\r\n              shiftId={selectedChat?.id}\r\n              staff={selectedChat?.staff}\r\n              socket={socket}\r\n            />\r\n          </Box>\r\n        )\r\n      }\r\n    </Flex >\r\n  );\r\n};\r\nexport default Messages;\r\n","import {\r\n  Box,\r\n  Flex,\r\n  SimpleGrid,\r\n  Spinner,\r\n  VStack,\r\n  Text,\r\n  Alert,\r\n  AlertIcon,\r\n  Heading,\r\n  Grid,\r\n  GridItem,\r\n  Icon,\r\n  IconButton,\r\n  Divider,\r\n} from \"@chakra-ui/react\";\r\nimport { DatePicker, Layout } from \"main/components\";\r\nimport { api } from \"main/configs/axios.config\";\r\nimport { ShiftDTO } from \"main/models\";\r\nimport ShiftDetails from \"main/views/shifts/shift-details\";\r\nimport moment from \"moment\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nconst CanceledReported = () => {\r\n  const [dateSelected, setDateSelected] = useState<string>(\r\n    moment().local().format(\"YYYY-MM-DD\").toString()\r\n  );\r\n  const [shiftsLoading, setShiftsLoading] = useState<boolean>(true);\r\n  const [shifts, setShifts] = useState<ShiftDTO[]>();\r\n  const [selectedShift, setSelectedShift] = useState<ShiftDTO>();\r\n  const getData = useCallback(async () => {\r\n    const result: any = await api.get(\"facilities/shifts/canceled-reported\", {\r\n      params: {\r\n        date: dateSelected,\r\n        time_zone: moment().local().format(\"Z\").toString(),\r\n      },\r\n    });\r\n    setShifts(result);\r\n    result && setSelectedShift(result[0]);\r\n    setShiftsLoading(false);\r\n  }, [dateSelected]);\r\n  useEffect(() => {\r\n    setShiftsLoading(true);\r\n    getData();\r\n    setShifts(undefined);\r\n  }, [getData, dateSelected]);\r\n\r\n  return (\r\n    <div className='App'>\r\n      <Grid gap={8} templateColumns='repeat(3, 1fr)'>\r\n        <GridItem colSpan={{ base: 3, xl: 2 }}>\r\n          <VStack bg='#fff' gap={8} p={5} borderRadius='lg'>\r\n            <DatePicker\r\n              value={dateSelected}\r\n              onChangeDate={setDateSelected}\r\n              width='80%'\r\n            />\r\n            {shiftsLoading && (\r\n              <Flex p={10}>\r\n                <Spinner color='red' />\r\n              </Flex>\r\n            )}\r\n            {!shiftsLoading && (!shifts || shifts.length === 0) && (\r\n              <Alert status='warning' w={\"100%\"}>\r\n                <AlertIcon />\r\n                No shifts found!\r\n              </Alert>\r\n            )}\r\n            <Box width='100%'>\r\n              {shifts?.map((shift: ShiftDTO, index: number) => (\r\n                <Box\r\n                  p={5}\r\n                  borderBottom={\r\n                    index < shifts.length - 1 ? \"1px solid lightgray\" : \"\"\r\n                  }\r\n                  bg={shift.id === selectedShift?.id ? \"gray.50\" : \"\"}\r\n                  onClick={() => setSelectedShift(shift)}\r\n                  transition='0.5s background ease'\r\n                >\r\n                  {shift.staff && (\r\n                    <Heading\r\n                      size='md'\r\n                      textTransform='capitalize'\r\n                      mb={3}\r\n                    >{`${shift.staff?.first_name} ${shift.staff?.last_name}`}</Heading>\r\n                  )}\r\n                  <Flex\r\n                    flexWrap='wrap'\r\n                    key={`shift-${shift.id}`}\r\n                    gap={{ base: 3, md: 5, lg: 10 }}\r\n                    alignItems={{ base: \"end\", md: \"start\" }}\r\n                  >\r\n                    <Flex flexWrap='wrap' gap={{ base: 3, md: 5, lg: 10 }}>\r\n                      <Box>\r\n                        <Text>{`Invoice rate: $${shift.invoice_rate}`}</Text>\r\n                        <Text>{`Start time: ${moment(shift.start_time).format(\r\n                          \"DD/M/YYYY HH:MM A\"\r\n                        )}`}</Text>\r\n                      </Box>\r\n                      <Box>\r\n                        <Text>{`#${shift.id}`}</Text>\r\n                        <Text>{`Canceled: ${moment(shift.canceled_time).format(\r\n                          \"DD/M/YYYY HH:MM A\"\r\n                        )}`}</Text>\r\n                      </Box>\r\n                    </Flex>\r\n                    <Heading textTransform='capitalize' color='red' size='sm'>\r\n                      {shift.shift_status}\r\n                    </Heading>\r\n                  </Flex>\r\n                </Box>\r\n              ))}\r\n            </Box>\r\n          </VStack>\r\n        </GridItem>\r\n        <GridItem colSpan={{ base: 3, xl: 1 }}>\r\n          {!shiftsLoading && selectedShift && (\r\n            <Box bg='#fff' borderRadius='lg'>\r\n              <Heading\r\n                py={4}\r\n                size='lg'\r\n                textAlign='center'\r\n                borderBottom='1px solid lightgray'\r\n              >\r\n                Details\r\n              </Heading>\r\n              <ShiftDetails shift={selectedShift} />\r\n            </Box>\r\n          )}\r\n        </GridItem>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\nexport default CanceledReported;\r\n","import {\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  HStack,\r\n  Heading,\r\n  Box,\r\n  Text,\r\n  IconButton,\r\n  Flex,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport {Layout} from \"main/components\";\r\nimport {api} from \"main/configs/axios.config\";\r\nimport {BsBellFill} from \"react-icons/bs\";\r\nimport moment from \"moment\";\r\nimport {useCallback, useEffect, useState} from \"react\";\r\nconst Notifications = () => {\r\n  const [notifications, setNotifications] = useState<any[]>();\r\n\r\n  const getNotifications = useCallback(async () => {\r\n    const res: any[] = await api.get(\"facilities/notifications\", {\r\n      params: {\r\n        time_zone: moment().local().format(\"Z\").toString(),\r\n      },\r\n    });\r\n\r\n    setNotifications(res);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getNotifications();\r\n  }, [getNotifications]);\r\n  return (\r\n    <>\r\n      <HStack height='100%' rounded='lg'>\r\n        {!notifications ? (\r\n          <Flex justifyContent='center' alignItems='center' w='100%'>\r\n            <Spinner color='#E3022A' />\r\n          </Flex>\r\n        ) : (\r\n          <Box w='100%' h='100%'>\r\n            {notifications?.map((notification: any) => (\r\n              <Card\r\n                p={3}\r\n                bg='#fff'\r\n                key={notification.id}\r\n                variant='elevated'\r\n                maxWidth='70%'\r\n                mx='auto'\r\n                my={4}\r\n              >\r\n                <CardHeader>\r\n                  <Flex>\r\n                    <Flex flex='1' gap='4' alignItems='center' flexWrap='wrap'>\r\n                      <IconButton\r\n                        aria-label='notification'\r\n                        colorScheme='red'\r\n                        size='sm'\r\n                        icon={<BsBellFill />}\r\n                      />\r\n                      <Box>\r\n                        <Heading size='sm'>\r\n                          {moment(notification.date).format(\r\n                            \"MM/DD/YYYY h:mm a\"\r\n                          )}\r\n                        </Heading>\r\n                      </Box>\r\n                    </Flex>\r\n                  </Flex>\r\n                </CardHeader>\r\n\r\n                <CardBody>\r\n                  <Heading size='sm'>{notification.title}</Heading>\r\n                  <Text fontSize='sm'>{notification.body}</Text>\r\n                </CardBody>\r\n              </Card>\r\n            ))}\r\n          </Box>\r\n        )}\r\n      </HStack>\r\n    </>\r\n  );\r\n};\r\nexport default Notifications;\r\n","import {\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogCloseButton,\r\n  AlertDialogContent,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogOverlay,\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  HStack,\r\n  Heading,\r\n  Icon,\r\n  IconButton,\r\n  Modal,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  Text,\r\n  VStack,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport { MdBusinessCenter } from \"react-icons/md\";\r\nimport { BsGrid1X2Fill, BsClock } from \"react-icons/bs\";\r\nimport { ShiftDTO } from \"main/models\";\r\nimport moment from \"moment\";\r\nimport { useRef, useState } from \"react\";\r\nimport { IoMdArrowBack } from \"react-icons/io\";\r\nimport CompletedShiftDetails from \"./completed-shift-details\";\r\ntype InvoiceShiftCardProps = {\r\n  shift: ShiftDTO;\r\n  onCancelShift?: (id: number) => void;\r\n};\r\n\r\nconst InvoiceShiftCard = (props: InvoiceShiftCardProps) => {\r\n  const { shift, onCancelShift } = props;\r\n  const {\r\n    id,\r\n    role,\r\n    invoice_rate,\r\n    floor,\r\n    start_time,\r\n    end_time,\r\n    staff,\r\n    hours,\r\n    worked_minutes,\r\n    finished_price,\r\n  } = shift;\r\n  const { isOpen, onClose, onOpen } = useDisclosure();\r\n  const [showTimesheet, setShowTimesheet] = useState<boolean>(false)\r\n  const cancelRef = useRef<any>(null);\r\n  return (\r\n    <Box maxWidth={400} mx='auto' my={5} minWidth={{ base: \"100%\", md: 350 }}>\r\n      <Card bg='#fff' p={8} boxShadow='md' border={2} variant='elevated'>\r\n        <CardHeader p={0} onClick={onOpen} _hover={{ cursor: 'pointer' }}>\r\n          <VStack alignItems='start'>\r\n            <Heading fontSize='xl'>{`Shift #${id}`}</Heading>\r\n            <Text\r\n              fontSize='xl'\r\n              textTransform='capitalize'\r\n            >{`${staff?.first_name} ${staff?.last_name}`}</Text>\r\n          </VStack>\r\n        </CardHeader>\r\n        <CardBody p={0}>\r\n          <HStack justifyContent='space-between' flexWrap='wrap' my={3} gap={3}>\r\n            <Text display='flex' alignItems='center'>\r\n              <Icon\r\n                color='gray.600'\r\n                as={MdBusinessCenter}\r\n                fontSize='xl'\r\n                mr={2}\r\n              />\r\n              {`Role: `}\r\n            </Text>\r\n            <Text>{`${role}`}</Text>\r\n          </HStack>\r\n          <HStack justifyContent='space-between' flexWrap='wrap' my={3} gap={3}>\r\n            <Text>Start time:</Text>\r\n            <Text\r\n              textAlign={{ base: \"left\", md: \"right\" }}\r\n              display='flex'\r\n              alignItems='center'\r\n            >\r\n              <Icon color='gray.600' as={BsClock} mr={2} />\r\n              {`${moment(start_time).format(\"MM/D/YYYY hh:mm A\")}`}\r\n            </Text>\r\n          </HStack>\r\n          <HStack justifyContent='space-between' flexWrap='wrap' my={3} gap={3}>\r\n            <Text\r\n              verticalAlign='middle'\r\n              textAlign={{ base: \"left\", md: \"right\" }}\r\n            >\r\n              {`Hours: ${hours}`}\r\n            </Text>\r\n            <Text>{`Worked: ${parseInt((worked_minutes / 60).toString())}h ${worked_minutes % 60\r\n              }m`}</Text>\r\n          </HStack>\r\n          <HStack justifyContent='space-between' flexWrap='wrap' my={3} gap={3}>\r\n            <Text\r\n              verticalAlign='middle'\r\n              textAlign={{ base: \"left\", md: \"right\" }}\r\n            >\r\n              {`Invoice rate: `}\r\n            </Text>\r\n            <Text>{`$${invoice_rate}`}</Text>\r\n          </HStack>\r\n          <HStack justifyContent='space-between' flexWrap='wrap' my={3} gap={3}>\r\n            <Text\r\n              verticalAlign='middle'\r\n              textAlign={{ base: \"left\", md: \"right\" }}\r\n            >\r\n              {`Finished Price: `}\r\n            </Text>\r\n            <Text>{`$${finished_price}`}</Text>\r\n          </HStack>\r\n        </CardBody>\r\n      </Card>\r\n      <Modal isOpen={isOpen} onClose={onClose} size='3xl'>\r\n        <ModalOverlay />\r\n        <ModalContent mx={{ base: 5, md: 0 }}>\r\n          <ModalHeader>\r\n            {showTimesheet ? (\r\n              <HStack justifyContent='start'>\r\n                <IconButton\r\n                  aria-label='go-back'\r\n                  icon={<Icon as={IoMdArrowBack} />}\r\n                  onClick={() => setShowTimesheet(false)}\r\n                  variant='ghost'\r\n                  rounded='full'\r\n                />\r\n                <Heading size='md'>Timesheet</Heading>\r\n              </HStack>\r\n            ) : (\r\n              \"Shift Details\"\r\n            )}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody mb={5} p={5}>\r\n            <CompletedShiftDetails shift={shift} showTimesheet={showTimesheet} setShowTimesheet={setShowTimesheet} />\r\n          </ModalBody>\r\n        </ModalContent>\r\n      </Modal>\r\n    </Box>\r\n  );\r\n};\r\nexport default InvoiceShiftCard;\r\n","import {\r\n  SimpleGrid,\r\n  Card,\r\n  CardBody,\r\n  Heading,\r\n  Spinner,\r\n  Text,\r\n  Button,\r\n  Flex,\r\n  Divider,\r\n  Icon,\r\n  Box,\r\n  IconButton,\r\n  HStack,\r\n  TableContainer,\r\n  Table,\r\n  Tbody,\r\n  Td,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n  Modal,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport { Layout } from \"main/components\";\r\nimport { api } from \"main/configs/axios.config\";\r\nimport { ShiftDTO } from \"main/models\";\r\nimport CompletedShiftDetails from \"main/views/shifts/completed-shift-details\";\r\nimport InvoiceShiftCard from \"main/views/shifts/invoice-shift\";\r\nimport OpenShiftCard from \"main/views/shifts/open-shifts\";\r\nimport moment from \"moment\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport { FaList } from \"react-icons/fa\";\r\nimport { IoMdArrowBack, IoMdGrid } from \"react-icons/io\";\r\ntype InvoiceData = {\r\n  invoice: {\r\n    invoice_until_now: number;\r\n    invoice_starts_date: string;\r\n    invoice_end_date: string;\r\n  };\r\n  timesheet: ShiftDTO[];\r\n};\r\n\r\nconst InvoicesCurrent = () => {\r\n  const [data, setData] = useState<InvoiceData>();\r\n  const [isList, setIsList] = useState(true);\r\n  const [selectedShift, setSelectedShift] = useState<ShiftDTO>();\r\n  const getData = useCallback(async () => {\r\n    const result: any = await api.get(\"facilities/invoice\");\r\n    setData(result);\r\n  }, []);\r\n  useEffect(() => {\r\n    getData();\r\n  }, [getData]);\r\n\r\n  const { isOpen, onClose, onOpen } = useDisclosure();\r\n  const [showTimesheet, setShowTimesheet] = useState<boolean>(false)\r\n  return (\r\n    <div className='App'>\r\n      <Flex justifyContent='center' gap={10} flexWrap='wrap'>\r\n        <Card width='60' px={8} bg='#fff' textAlign='center' boxShadow='md'>\r\n          <CardBody>\r\n            <Heading size='sm'>Invoice until now</Heading>\r\n            <Heading fontWeight={\"medium\"} variant={\"body2\"} size={\"md\"} my={3}>\r\n              {!data ? (\r\n                <Spinner color='red.500' />\r\n              ) : (\r\n                `$${data.invoice.invoice_until_now}`\r\n              )}\r\n            </Heading>\r\n            <Text color='GrayText' my={2}>\r\n              This pay period\r\n            </Text>\r\n          </CardBody>\r\n        </Card>\r\n        <Card width='60' px={8} bg='#fff' textAlign='center' boxShadow='md'>\r\n          <CardBody>\r\n            <Heading size='sm'>Invoice starts</Heading>\r\n            <Heading fontWeight={\"medium\"} variant={\"body2\"} size={\"md\"} my={3}>\r\n              {!data ? (\r\n                <Spinner color='red.500' />\r\n              ) : (\r\n                moment(data.invoice.invoice_starts_date).format(\"M/D/yyyy\")\r\n              )}\r\n            </Heading>\r\n            <Text color='GrayText' my={2}>\r\n              Current Invoice\r\n            </Text>\r\n          </CardBody>\r\n        </Card>\r\n        <Card width='60' px={8} bg='#fff' textAlign='center' boxShadow='md'>\r\n          <CardBody>\r\n            <Heading size='sm'>Invoice ends</Heading>\r\n            <Heading fontWeight={\"medium\"} variant={\"body2\"} size={\"md\"} my={3}>\r\n              {!data ? (\r\n                <Spinner color='red.500' />\r\n              ) : (\r\n                moment(data.invoice.invoice_end_date).format(\"M/D/yyyy\")\r\n              )}\r\n            </Heading>\r\n            <Text color='GrayText' my={2}>\r\n              Due Date\r\n            </Text>\r\n          </CardBody>\r\n        </Card>\r\n      </Flex>\r\n      <Flex my={10} justifyContent='space-between' alignItems='center' gap={2}>\r\n        <Divider />\r\n        <HStack>\r\n          <IconButton\r\n            borderRadius='3xl'\r\n            aria-label='list'\r\n            icon={<Icon as={FaList} />}\r\n            colorScheme={isList ? \"red\" : \"gray\"}\r\n            onClick={() => setIsList(true)}\r\n          />\r\n          <IconButton\r\n            borderRadius='3xl'\r\n            aria-label='grid'\r\n            icon={<Icon as={IoMdGrid} />}\r\n            colorScheme={isList ? \"gray\" : \"red\"}\r\n            onClick={() => setIsList(false)}\r\n          />\r\n        </HStack>\r\n      </Flex>\r\n      {!data ? (\r\n        <HStack mt={15}>\r\n          <Spinner color='red.500' mx='auto' size='lg' />\r\n        </HStack>\r\n      ) : (\r\n        <>\r\n          {isList && data && (\r\n            <TableContainer bg='white' borderRadius='md'>\r\n              <Table size='sm'>\r\n                <Thead>\r\n                  <Tr>\r\n                    <Th p={5}>Description</Th>\r\n                    <Th p={5} isNumeric>\r\n                      Hours\r\n                    </Th>\r\n                    <Th p={5} isNumeric>\r\n                      Invoice Rate\r\n                    </Th>\r\n                    <Th p={5} isNumeric>\r\n                      Total Amount\r\n                    </Th>\r\n                  </Tr>\r\n                </Thead>\r\n                <Tbody>\r\n                  {data.timesheet.map((shift: ShiftDTO) => (\r\n                    <Tr onClick={() => { setSelectedShift(shift); onOpen() }} _hover={{ cursor: 'pointer' }}>\r\n                      <Td p={5}>\r\n                        <Heading\r\n                          size='sm'\r\n                          fontWeight='semibold'\r\n                          color='GrayText'\r\n                        >{`${moment(shift.clockout_time).format(\r\n                          \"MM/D/YYYY\"\r\n                        )}, ${shift.role}, ${shift.staff?.first_name} ${shift.staff?.last_name\r\n                          }`}</Heading>\r\n                        <HStack mt={3}>\r\n                          <Text>{`${moment(shift.clockin_time).format(\r\n                            \"HH:mm\"\r\n                          )} - ${moment(shift.clockout_time).format(\r\n                            \"HH:mm\"\r\n                          )}`}</Text>\r\n                          <Text\r\n                            color='green'\r\n                            fontWeight='semibold'\r\n                          >{`${shift.shift_status}`}</Text>\r\n                        </HStack>\r\n                      </Td>\r\n                      <Td p={5} isNumeric>{`${parseInt(\r\n                        (shift.worked_minutes / 60).toString()\r\n                      )}h ${shift.worked_minutes % 60}m`}</Td>\r\n                      <Td p={5} isNumeric>{`$${shift.invoice_rate}`}</Td>\r\n                      <Td p={5} isNumeric>{`$${parseFloat(\r\n                        (\r\n                          (shift.invoice_rate * shift.worked_minutes) /\r\n                          60\r\n                        ).toString()\r\n                      ).toFixed(2)}`}</Td>\r\n                    </Tr>\r\n                  ))}\r\n                </Tbody>\r\n              </Table>\r\n            </TableContainer>\r\n          )}\r\n          {!isList && data && (\r\n            <Flex\r\n              flexDir='row'\r\n              justifyContent='start'\r\n              alignItems='center'\r\n              flexWrap='wrap'\r\n              gap={4}\r\n            >\r\n              {data.timesheet.map((shift: ShiftDTO) => (\r\n                <InvoiceShiftCard shift={shift} key={shift.id} />\r\n              ))}\r\n            </Flex>\r\n          )}\r\n        </>\r\n      )}\r\n      <Modal isOpen={isOpen && !!selectedShift} onClose={() => { onClose(); setShowTimesheet(false) }} size='3xl'>\r\n        <ModalOverlay />\r\n        <ModalContent mx={{ base: 5, md: 0 }}>\r\n          <ModalHeader>\r\n            {showTimesheet ? (\r\n              <HStack justifyContent='start'>\r\n                <IconButton\r\n                  aria-label='go-back'\r\n                  icon={<Icon as={IoMdArrowBack} />}\r\n                  onClick={() => setShowTimesheet(false)}\r\n                  variant='ghost'\r\n                  rounded='full'\r\n                />\r\n                <Heading size='md'>Timesheet</Heading>\r\n              </HStack>\r\n            ) : (\r\n              \"Shift Details\"\r\n            )}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody mb={5} p={5}>\r\n            {selectedShift && <CompletedShiftDetails shift={selectedShift} showTimesheet={showTimesheet} setShowTimesheet={setShowTimesheet} />}\r\n          </ModalBody>\r\n        </ModalContent>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\nexport default InvoicesCurrent;\r\n","import {\r\n  SimpleGrid,\r\n  Card,\r\n  CardBody,\r\n  Heading,\r\n  Spinner,\r\n  Text,\r\n  Button,\r\n  Flex,\r\n  Divider,\r\n  Icon,\r\n  Box,\r\n  IconButton,\r\n  HStack,\r\n  TableContainer,\r\n  Table,\r\n  Tbody,\r\n  Td,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n  Tag,\r\n} from \"@chakra-ui/react\";\r\nimport {Layout} from \"main/components\";\r\nimport {api} from \"main/configs/axios.config\";\r\nimport {ShiftDTO} from \"main/models\";\r\nimport OpenShiftCard from \"main/views/shifts/open-shifts\";\r\nimport moment from \"moment\";\r\nimport {useCallback, useEffect, useState} from \"react\";\r\nimport {FaList} from \"react-icons/fa\";\r\nimport {IoMdGrid} from \"react-icons/io\";\r\ntype InvoiceDTO = {\r\n  id: number;\r\n  invoice_date: string;\r\n  invoice_due_date: string;\r\n  facility_id: number;\r\n  is_late_fee: boolean;\r\n  past_due_date: string;\r\n  amount: number;\r\n  late_fees: number;\r\n  status: string;\r\n};\r\ntype InvoiceData = {\r\n  info: {\r\n    total_paid: string;\r\n    total_pending: string;\r\n    past_due: string;\r\n    late_fees: string;\r\n  };\r\n  previous_invoices: InvoiceDTO[];\r\n};\r\n\r\nconst InvoicesHistory = () => {\r\n  const [data, setData] = useState<InvoiceData>();\r\n  const [isList, setIsList] = useState(true);\r\n  const getData = useCallback(async () => {\r\n    const result: any = await api.get(\"facilities/invoices-history\");\r\n    setData(result);\r\n  }, []);\r\n  useEffect(() => {\r\n    getData();\r\n  }, [getData]);\r\n  return (\r\n    <div className='App'>\r\n      <Flex justifyContent='center' gap={10} flexWrap='wrap' my={5}>\r\n        <Card width='60' px={8} bg='#fff' textAlign='center' boxShadow='md'>\r\n          <CardBody>\r\n            <Heading size='md'>Total Paid</Heading>\r\n            <Heading fontWeight={\"medium\"} variant={\"body2\"} size={\"lg\"} my={3}>\r\n              {!data ? (\r\n                <Spinner color='red.500' />\r\n              ) : (\r\n                `$${data.info.total_paid ? data.info.total_paid : 0}`\r\n              )}\r\n            </Heading>\r\n            <Text color='GrayText' my={2}>\r\n              Last Month\r\n            </Text>\r\n          </CardBody>\r\n        </Card>\r\n        <Card width='60' px={8} bg='#fff' textAlign='center' boxShadow='md'>\r\n          <CardBody>\r\n            <Heading size='md'>Total Pending</Heading>\r\n            <Heading fontWeight={\"medium\"} variant={\"body2\"} size={\"lg\"} my={3}>\r\n              {!data ? (\r\n                <Spinner color='red.500' />\r\n              ) : (\r\n                `$${data.info.total_pending ? data.info.total_pending : 0}`\r\n              )}\r\n            </Heading>\r\n            <Text color='GrayText' my={2}>\r\n              Current Pay Period\r\n            </Text>\r\n          </CardBody>\r\n        </Card>\r\n        <Card width='60' px={8} bg='#fff' textAlign='center' boxShadow='md'>\r\n          <CardBody>\r\n            <Heading size='md'>Past Due</Heading>\r\n            <Heading fontWeight={\"medium\"} variant={\"body2\"} size={\"lg\"} my={3}>\r\n              {!data ? (\r\n                <Spinner color='red.500' />\r\n              ) : (\r\n                `$${data.info.past_due ? data.info.past_due : 0}`\r\n              )}\r\n            </Heading>\r\n            <Text color='GrayText' my={2}>\r\n              Total Invoices\r\n            </Text>\r\n          </CardBody>\r\n        </Card>\r\n        <Card width='60' px={8} bg='#fff' textAlign='center' boxShadow='md'>\r\n          <CardBody>\r\n            <Heading size='md'>Last Fees</Heading>\r\n            <Heading fontWeight={\"medium\"} variant={\"body2\"} size={\"lg\"} my={3}>\r\n              {!data ? (\r\n                <Spinner color='red.500' />\r\n              ) : (\r\n                `$${data.info.late_fees ? data.info.late_fees : 0}`\r\n              )}\r\n            </Heading>\r\n            <Text color='GrayText' my={2}>\r\n              This Month\r\n            </Text>\r\n          </CardBody>\r\n        </Card>\r\n      </Flex>\r\n      {!data ? (\r\n        <HStack mt={15}>\r\n          <Spinner color='red.500' mx='auto' size='lg' />\r\n        </HStack>\r\n      ) : (\r\n        <>\r\n          {data && (\r\n            <TableContainer bg='white' borderRadius='md' mt={8}>\r\n              <Table size='sm'>\r\n                <Thead>\r\n                  <Tr>\r\n                    <Th p={5}>Date Due</Th>\r\n                    <Th p={5}>Amount</Th>\r\n                    <Th p={5}>Invoice ID</Th>\r\n                    <Th p={5}>Past Due Date</Th>\r\n                    <Th p={5}>Late Fee</Th>\r\n                    <Th p={5}>Status</Th>\r\n                  </Tr>\r\n                </Thead>\r\n                <Tbody>\r\n                  {data.previous_invoices.map((invoice: InvoiceDTO) => (\r\n                    <Tr>\r\n                      <Td p={5}>\r\n                        {moment(invoice.invoice_due_date).format(\"D/MM/YYYY\")}\r\n                      </Td>\r\n                      <Td p={5}>{invoice.amount ? invoice.amount : 0}</Td>\r\n                      <Td p={5}>#{invoice.id}</Td>\r\n                      <Td p={5}>\r\n                        {moment(invoice.past_due_date).format(\"D/MM/YYYY\")}\r\n                      </Td>\r\n                      <Td p={5}>{`${invoice.late_fees ? \"Yes\" : \"No\"}`}</Td>\r\n                      <Td>\r\n                        <Tag\r\n                          px={3}\r\n                          borderRadius='xl'\r\n                          colorScheme={\r\n                            invoice.status === \"Pending\"\r\n                              ? \"blue\"\r\n                              : invoice.status === \"Past due\"\r\n                              ? \"red\"\r\n                              : invoice.status === \"Paid\"\r\n                              ? \"green\"\r\n                              : \"orange\"\r\n                          }\r\n                        >\r\n                          {invoice.status}\r\n                        </Tag>\r\n                      </Td>\r\n                    </Tr>\r\n                  ))}\r\n                </Tbody>\r\n              </Table>\r\n            </TableContainer>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default InvoicesHistory;\r\n","import { Text ,Box, Flex, Button} from \"@chakra-ui/react\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\nconst ContractNotVerified = () => {\r\n    return <Flex flexDir='column' width='100%' minHeight='70vh' rounded='md' alignItems='center' justifyContent='center'><Text>  Review and sign staffing contract to access Facility Dashboard.</Text> \r\n    <Box><Button\r\n                  backgroundColor='#E3022A'\r\n                  color={\"#fff\"}\r\n                  variant='solid'\r\n                  marginTop={4}\r\n                  width={\"100%\"}\r\n    mx='auto'\r\n    mt={5}\r\n                  sx={{\"&:hover\": {backgroundColor: \"#CC0024\"}}}\r\n                >\r\n                  <Link to='/facility/contract'>Go to Contract Page</Link>\r\n                </Button></Box> \r\n    </Flex>\r\n}\r\nexport default ContractNotVerified","import * as React from \"react\";\r\nimport { Route, Routes, useLocation, useNavigate } from \"react-router-dom\";\r\nimport { Layout } from \"main/components\";\r\nimport Facility from \"./dashboard\";\r\nimport Account from \"./account\";\r\nimport Contract from \"./contract\";\r\nimport Shifts from \"./shifts\";\r\nimport Messages from \"./messages\";\r\nimport CanceledReported from \"./canceled-reported\";\r\nimport Notifications from \"./notifications\";\r\nimport InvoicesCurrent from \"./invoices-current\";\r\nimport InvoicesHistory from \"./invoices-history\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { accountTypeKeyName, contractSubmittedKeyName } from \"main/configs/axios.config\";\r\nimport ContractNotVerified from \"main/views/contract/not-verified\";\r\n\r\nconst FacilityRoute = () => {\r\n  const navigate = useNavigate();\r\n  let location = useLocation();\r\n  const [authorized, setAuthorized] = useState<boolean>(false);\r\n  const [contractSubmitted, setContractSubmitted] = useState<boolean>();\r\n  useEffect(() => {\r\n    const account_type = localStorage.getItem(accountTypeKeyName);\r\n    const contract = localStorage.getItem(contractSubmittedKeyName);\r\n    if (contract) {\r\n      setContractSubmitted(JSON.parse(contract))\r\n    }\r\n    if (account_type && JSON.parse(account_type) !== \"facility\") {\r\n      navigate(\"/\");\r\n      return;\r\n    }\r\n    setAuthorized(true);\r\n  }, [location]);\r\n\r\n  return (\r\n    <Routes>\r\n      {authorized ? (\r\n        <Route path='/facility'>\r\n          <Route\r\n            path='dashboard'\r\n            element={\r\n              <Layout>\r\n                {contractSubmitted === true ? <Facility /> : <ContractNotVerified />}\r\n              </Layout>\r\n            }\r\n          />\r\n          <Route\r\n            path='shifts'\r\n            element={\r\n              <Layout>\r\n                {contractSubmitted === true ? <Shifts /> : <ContractNotVerified />}\r\n\r\n              </Layout>\r\n            }\r\n          />\r\n          <Route\r\n            path='messages'\r\n            element={\r\n              <Layout>\r\n                {contractSubmitted === true ? <Messages /> : <ContractNotVerified />}\r\n\r\n              </Layout>\r\n            }\r\n          />\r\n          <Route\r\n            path='account'\r\n            element={\r\n              <Layout>\r\n                {contractSubmitted === true ? <Account /> : <ContractNotVerified />}\r\n\r\n              </Layout>\r\n            }\r\n          />\r\n          <Route\r\n            path='contract'\r\n            element={\r\n              <Layout>\r\n                <Contract />\r\n              </Layout>\r\n            }\r\n          />\r\n          <Route\r\n            path='invoices-current'\r\n            element={\r\n              <Layout>\r\n                {contractSubmitted === true ? <InvoicesCurrent /> : <ContractNotVerified />}\r\n\r\n              </Layout>\r\n            }\r\n          />\r\n          <Route\r\n            path='invoices-history'\r\n            element={\r\n              <Layout>\r\n                {contractSubmitted === true ? <InvoicesHistory /> : <ContractNotVerified />}\r\n\r\n              </Layout>\r\n            }\r\n          />\r\n          <Route\r\n            path='canceled-reported'\r\n            element={\r\n              <Layout>\r\n                {contractSubmitted === true ? <CanceledReported /> : <ContractNotVerified />}\r\n\r\n              </Layout>\r\n            }\r\n          />\r\n          <Route\r\n            path='notifications'\r\n            element={\r\n              <Layout>\r\n                {contractSubmitted === true ? <Notifications /> : <ContractNotVerified />}\r\n\r\n              </Layout>\r\n            }\r\n          />\r\n        </Route>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </Routes>\r\n  );\r\n};\r\n\r\nexport default FacilityRoute;\r\n"],"names":["props","shift","onCancelShift","id","role","invoice_rate","floor","start_time","end_time","useDisclosure","isOpen","onClose","onOpen","cancelRef","useRef","maxWidth","mx","my","minWidth","base","md","bg","p","boxShadow","border","variant","flexWrap","justifyContent","fontSize","colorScheme","color","px","onClick","gap","display","alignItems","as","MdBusinessCenter","mr","BsGrid1X2Fill","verticalAlign","textAlign","BsClock","moment","format","motionPreset","leastDestructiveRef","isCentered","ref","ml","roleOptions","value","label","amOptions","onSubmit","useForm","defaultValues","needed","hours","am_pm","date","Date","toISOString","split","invoiceRate","handleSubmit","control","formState","setValue","watch","e","preventDefault","style","name","rules","required","render","field","onChange","error","fieldState","isInvalid","isRequired","options","paddingY","paddingX","marginX","message","columns","spacing","size","isAttached","rounded","icon","_hover","wordBreak","parseInt","toString","onChangeDate","isInput","mt","type","min","_active","outline","isLoading","isSubmitting","backgroundColor","marginTop","width","sx","useState","toDate","setDate","data","setData","shiftsLoading","setShiftsLoading","shifts","setShifts","getData","useCallback","api","result","getShifts","shiftDate","params","time_zone","useEffect","handleChangeDate","handlePostShift","date_time","toast","handleCancelShift","shiftId","shift_id","className","flexDir","fontWeight","canceled_shifts","to","borderRadius","hired_shifts","state","shiftTab","open_shifts","invoices_past_due","py","maxHeight","wheelPropagation","swipeEasing","length","map","status","mb","placePredictions","setPlacePredictions","setError","useSelector","userData","facility_name","address","email","lat","lng","country","city","postal_code","company_email","phone","dispatch","useDispatch","undefined","updateUser","useOutsideClick","handler","handleGetAddress","search","w","defaultValue","position","zIndex","textOverflow","evt","target","padding","in","left","right","top","overflowY","item","borderBottom","place_name","longitude","latitude","handleAddressSelect","transition","cursor","place_id","disabled","isDirty","signed","frameBytes","setFrameBytes","useFormContext","getValues","readPdf","fetch","then","res","arrayBuffer","existingPdfBytes","PDFDocument","pdfDoc","form","getForm","getFields","forEach","now","PDFCheckBox","check","PDFTextField","getName","setText","enableReadOnly","signature_base64","dataUrl","signatureBytes","imgBytes","embedPng","img","signatureImage","i","getPageCount","getPage","drawImage","x","y","height","flatten","save","saveAsBase64","dataUri","frameToBytes","minH","src","cStep","setCStep","cPushArray","setCPushArray","coord","setCoord","isDrawing","setIsDrawing","canvasRef","refContainer","resize","canvas","current","container","context","getContext","dimensions","getBoundingClientRect","canvasPic","document","createElement","onload","start","event","reposition","rect","scaleX","scaleY","newCoord","clientX","clientY","stop","filter","d","index","toDataURL","draw","ctx","beginPath","lineWidth","lineCap","strokeStyle","moveTo","lineTo","stroke","addEventListener","window","removeEventListener","dataURL","signature","replace","clearRect","direction","creditCard","datePattern","inputMode","maxLength","max","step","setStatus","isSigned","setIsSigned","navigate","useNavigate","methods","handleFormSubmit","invoice_option","payment_type","billing_name","us_bank_account_number","us_bank_account_type","us_bank_routing_number","number","cvc","card_exp","invoice_day_one","invoice_day_two","rest","cardExpMonth","cardExpYear","payment_method","us_bank_account","us_bank_account_holder_type","card","exp_month","exp_year","invoices_days","localStorage","setItem","contractSubmittedKeyName","JSON","stringify","handleErrors","errors","console","log","sliderItemWidth","children","dots","arrows","fade","infinite","autoplay","speed","autoplaySpeed","slidesToShow","slidesToScroll","swipe","settings","setSettings","slider","setSlider","carouselRef","useTheme","breakpoints","handleResize","innerSlider","list","clientWidth","num","useBreakpointValue","side","overflow","rel","charSet","href","transform","slickPrev","slickNext","requested_time","BsCircleFill","orientation","borderColor","booked_time","shift_cancelled","shift_reported","borderStyle","clockin_time","clockout_time","canceled_time","reported_time","staff","shift_status","finished_price","documents","setDocuments","selectedDocument","setSelectedDocument","getShiftDetails","local","minW","textTransform","first_name","last_name","marginLeft","IoMdArrowBack","alt","objectFit","Object","keys","key","showTimesheet","setShowTimesheet","setIsLoading","timesheet","setTimesheet","time_sheet","worked_minutes","StyledTab","styled","Tab","selectedDate","setSelectedDate","location","useLocation","tabIndex","setTabIndex","openShifts","setOpenShifts","hiredShifts","setHiredShifts","completedShifts","setCompletedShifts","url","align","lg","dates","Array","getFullYear","getMonth","getDate","push","day","getDates","getItem","messages","socket","message_date","user","useAuth","io","connect","on","msg","pb","ar","indexOf","msg_date","isSame","sender_phone","gridTemplateColumns","open","emit","receiver","require","parse","origin","chats","setChats","selectedChat","setSelectedChat","setMessages","isConnected","setIsConnected","getMessages","getMessagesWithUser","connected","off","minHeight","h","chat","unread_messages","last_message","dateSelected","setDateSelected","selectedShift","setSelectedShift","templateColumns","colSpan","xl","notifications","setNotifications","getNotifications","notification","flex","title","body","isList","setIsList","invoice","invoice_until_now","invoice_starts_date","invoice_end_date","FaList","IoMdGrid","Tr","Th","isNumeric","Td","parseFloat","toFixed","info","total_paid","total_pending","past_due","late_fees","previous_invoices","invoice_due_date","amount","past_due_date","authorized","setAuthorized","contractSubmitted","setContractSubmitted","account_type","accountTypeKeyName","contract","path","element"],"sourceRoot":""}